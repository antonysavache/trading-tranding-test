import {Injectable, Logger, OnModuleInit} from '@nestjs/common';
import {Cron, CronExpression} from '@nestjs/schedule';
import {BinanceService} from './modules/data/binance.service';
import {DataBufferService} from './modules/data/data-buffer.service';
import {WebSocketManagerService} from './modules/data/websocket-manager.service';
import {PriceAnalysisService} from './modules/analysis/price-analysis.service';
import {TrendAnalysisService} from './modules/analysis/trend-analysis.service';
import {TradingService} from './modules/trading/trading.service';
import {TrendTradingService} from './modules/trading/trend-trading.service';
import {LoggingService} from './shared';
import {KlineData} from './interfaces/kline.interface';

@Injectable()
export class AppService implements OnModuleInit {
    private readonly logger = new Logger(AppService.name);
    private isInitialized = false;
    private symbols: string[] = [];

    constructor(
        private binanceService: BinanceService,
        private dataBufferService: DataBufferService,
        private webSocketManagerService: WebSocketManagerService,
        private priceAnalysisService: PriceAnalysisService,
        private trendAnalysisService: TrendAnalysisService,
        private tradingService: TradingService,
        private trendTradingService: TrendTradingService,
        private loggingService: LoggingService,
    ) {
    }

    async onModuleInit() {
        try {
            await this.initializeApplication();
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
            throw error;
        }
    }

    private async initializeApplication(): Promise<void> {
        this.logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–æ–∫–æ–≤–∏–∫–æ–≤...');

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
        const tradingPairs = await this.binanceService.getTopTradingPairs();
        this.symbols = tradingPairs.map(pair => pair.symbol);

        // üî• –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ BTCUSDT –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è BTC —Ç—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞
        if (!this.symbols.includes('BTCUSDT')) {
            this.symbols.unshift('BTCUSDT'); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            this.logger.log('üîß BTCUSDT –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ BTC —Ç—Ä–µ–Ω–¥–∞');
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        this.loggingService.info(
            `–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${this.symbols.length} —Å–∏–º–≤–æ–ª–æ–≤`,
            'AppService'
        );

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket –ø–æ—Ç–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è multi-stream –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.webSocketManagerService.subscribeToMultipleKlines(
            this.symbols,
            (kline: KlineData) => this.handleKlineData(kline),
            (error: Error) => this.handleKlineError(error)
        );

        this.isInitialized = true;
        this.logger.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–æ–∫–æ–≤–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    }

    private async handleKlineData(kline: KlineData): Promise<void> {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –±—É—Ñ–µ—Ä
            this.dataBufferService.addKline(kline);

            // üî• –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º BTC —Ç—Ä–µ–Ω–¥ –µ—Å–ª–∏ —ç—Ç–æ BTCUSDT
            if (kline.symbol === 'BTCUSDT') {
                this.trendTradingService['btcTrendService']?.updateBTCPrice(kline);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            const currentPrice = parseFloat(kline.close);
            this.trendTradingService.updatePositions(kline.symbol, currentPrice);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ)
            if (!this.dataBufferService.hasEnoughData(kline.symbol, 10)) {
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const klines = this.dataBufferService.getKlines(kline.symbol);

            // üéØ –ù–û–í–´–ô –ê–ù–ê–õ–ò–ó: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¢–†–ï–ù–î–û–í
            const trendPatterns = this.trendAnalysisService.analyzeKlines(klines);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            for (const trendPattern of trendPatterns) {
                this.logger.log(`üìà –¢–†–ï–ù–î –ù–ê–ô–î–ï–ù: ${trendPattern.symbol} | ${trendPattern.trendDirection}`);

                // –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
                this.loggingService.info(
                    `–¢—Ä–µ–Ω–¥ –Ω–∞–π–¥–µ–Ω: ${trendPattern.symbol} | ${trendPattern.trendDirection} | –°—Ç—É–ø–µ–Ω—å: ${trendPattern.stepPercentage.toFixed(2)}%`,
                    'AppService'
                );

                // –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
                const trendSignals = await this.trendTradingService.processTrendPattern(trendPattern, currentPrice);

                for (const signal of trendSignals) {
                    const position = this.trendTradingService.openPosition(signal);
                    this.logger.log(`üíº –¢–†–ï–ù–î –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê: ${position.symbol} ${position.direction}`);
                }
            }

        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–ª—è ${kline.symbol}: ${error.message}`);
            this.loggingService.error(`${kline.symbol}: ${error.message}`, 'AppService');
        }
    }

    private handleKlineError(error: Error): void {
        this.logger.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
    }

    private logActiveMovements(): void {
        // –£–±—Ä–∞–ª–∏ —á–∞—Å—Ç—ã–µ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–∏–∫–∏
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –±–æ–∫–æ–≤–∏–∫–∞
    }

    private lastMovementLogTime = 0;

    private getLastMovementLogTime(): number {
        return this.lastMovementLogTime;
    }

    private setLastMovementLogTime(time: number): void {
        this.lastMovementLogTime = time;
    }

    @Cron(CronExpression.EVERY_MINUTE)
    handleMinuteAnalysis(): void {
        if (this.isInitialized) {
            this.logActiveMovements();
        }
    }

    @Cron(CronExpression.EVERY_MINUTE)
    handleStatistics(): void {
        if (this.isInitialized) {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥-—Ç–æ—Ä–≥–æ–≤–ª–∏
            const trendStats = this.trendTradingService.getTradingStats();
            if (trendStats.closedTrades > 0) {
                this.logger.log(`üìä –¢–†–ï–ù–î –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–¥–µ–ª–æ–∫ ${trendStats.closedTrades} | Win Rate: ${trendStats.winRate.toFixed(1)}%`);
            }
        }
    }

    @Cron(CronExpression.EVERY_10_MINUTES)
    handleHealthCheck(): void {
        if (this.isInitialized) {
            const activeTrendMovements = this.trendAnalysisService.getActiveTrendMovements();

            // –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ —Å–ø–∞–º–∞
            if (activeTrendMovements.size > 0) {
                this.logger.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π: ${activeTrendMovements.size}`);
            }
        }
    }

    getHello(): string {
        return 'üéØ –¢–†–ï–ù–î-–°–ö–†–ò–ù–ï–† –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω!';
    }

    getStatus(): any {
        const trendStats = this.trendTradingService.getTradingStats();
        const openPositions = this.trendTradingService.getOpenPositions();
        const btcTrendAnalysis = this.trendTradingService['btcTrendService']?.getBTCTrendAnalysis();

        return {
            initialized: this.isInitialized,
            strategy: 'TREND_TRADING',
            trackedSymbols: this.symbols.length,
            btcIncluded: this.symbols.includes('BTCUSDT'),
            bufferStats: this.dataBufferService.getBufferStats(),
            activeTrendMovements: this.trendAnalysisService.getActiveTrendMovements().size,
            btcTrend: btcTrendAnalysis ? {
                trend: btcTrendAnalysis.trend,
                ready: this.trendTradingService['btcTrendService']?.isReady() || false,
                ema20: btcTrendAnalysis.ema20?.toFixed(2),
                ema50: btcTrendAnalysis.ema50?.toFixed(2),
            } : {
                trend: 'NOT_INITIALIZED',
                ready: false,
            },
            trendTrading: {
                stats: trendStats,
                openPositions: openPositions.length,
                recentPositions: openPositions.slice(-5).map(pos => ({
                    symbol: pos.symbol,
                    direction: pos.direction,
                    pnl: pos.unrealizedPnl.toFixed(2) + '%',
                    entryPrice: pos.entryPrice,
                    currentPrice: pos.currentPrice,
                    confirmation: pos.confirmation ? {
                        btcTrend: pos.confirmation.btcTrend,
                        volumeProfile: pos.confirmation.volumeProfile,
                        overall: pos.confirmation.overall,
                        icon: pos.confirmation.overall ? 'üü¢' : 'üü°',
                        status: pos.confirmation.overall ? '–ü–û–õ–ù–û–ï' : '–ß–ê–°–¢–ò–ß–ù–û–ï',
                    } : null,
                })),
            },
        };
    }
}
