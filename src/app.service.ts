import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { BinanceService } from './modules/data/binance.service';
import { DataBufferService } from './modules/data/data-buffer.service';
import { WebSocketManagerService } from './modules/data/websocket-manager.service';
import { PriceAnalysisService } from './modules/analysis/price-analysis.service';
import { VirtualTradingService } from './modules/trading/virtual-trading.service';
import { KlineData } from './interfaces/kline.interface';

@Injectable()
export class AppService implements OnModuleInit {
  private readonly logger = new Logger(AppService.name);
  private isInitialized = false;
  private symbols: string[] = [];

  constructor(
    private binanceService: BinanceService,
    private dataBufferService: DataBufferService,
    private webSocketManagerService: WebSocketManagerService,
    private priceAnalysisService: PriceAnalysisService,
    private virtualTradingService: VirtualTradingService,
  ) {}

  async onModuleInit() {
    try {
      await this.initializeApplication();
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  private async initializeApplication(): Promise<void> {
    this.logger.log(
      '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–æ–∫–æ–≤–∏–∫–æ–≤ (5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏)...',
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
    const tradingPairs = await this.binanceService.getTopTradingPairs();
    this.symbols = tradingPairs.map((pair) => pair.symbol);

    this.logger.log(
      `–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${this.symbols.length} —Å–∏–º–≤–æ–ª–æ–≤`,
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket –ø–æ—Ç–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è multi-stream –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.webSocketManagerService.subscribeToMultipleKlines(
      this.symbols,
      (kline: KlineData) => this.handleKlineData(kline),
      (error: Error) => this.handleKlineError(error),
    );

    this.isInitialized = true;
    this.logger.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–æ–∫–æ–≤–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  }

  private async handleKlineData(kline: KlineData): Promise<void> {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –±—É—Ñ–µ—Ä
      this.dataBufferService.addKline(kline);

      // –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤–µ—á—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      await this.priceAnalysisService.processKlineForTrading(kline);

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 20-—é —Å–≤–µ—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–µ–∂–µ –¥–ª—è 5m)
      if (Math.random() < 0.05) {
        // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 20 —Å–≤–µ—á–µ–π
        this.logger.debug(
          `üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ 5m —Å–≤–µ—á–∞: ${kline.symbol} –ø–æ —Ü–µ–Ω–µ ${parseFloat(kline.close).toFixed(4)}`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π)
      if (!this.dataBufferService.hasEnoughData(kline.symbol, 20)) {
        // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 —Å–≤–µ—á–µ–π (100 –º–∏–Ω—É—Ç)
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const klines = this.dataBufferService.getKlines(kline.symbol);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–æ–∫–æ–≤–∏–∫–æ–≤
      const patterns = await this.priceAnalysisService.analyzeKlines(klines);

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–∫–æ–≤–∏–∫–∏
      for (const pattern of patterns) {
        const direction =
          pattern.direction === 'high_to_low_to_high'
            ? '–≤–æ–∑–≤—Ä–∞—Ç –∫ –º–∞–∫—Å–∏–º—É–º—É'
            : '–≤–æ–∑–≤—Ä–∞—Ç –∫ –º–∏–Ω–∏–º—É–º—É';
        this.logger.log(
          `üîÑ –ë–û–ö–û–í–ò–ö –ù–ê–ô–î–ï–ù: ${pattern.symbol} | ${direction} | –®–∏—Ä–∏–Ω–∞: ${pattern.channelWidthPercent.toFixed(2)}%`,
        );
      }
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–ª—è ${kline.symbol}: ${error.message}`,
      );
    }
  }

  private handleKlineError(error: Error): void {
    this.logger.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
  }

  private logActiveMovements(): void {
    if (!this.isInitialized) return;

    const activeMovements = this.priceAnalysisService.getActiveMovements();
    const bufferStats = this.dataBufferService.getBufferStats();
    const tradingStats = this.virtualTradingService.getTradingStats();

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∫–ª—é—á–∞—è —Ç–æ—Ä–≥–æ–≤–ª—é
    this.logger.log(
      `üìä –ê–ö–¢–ò–í–ù–û–°–¢–¨: –î–≤–∏–∂–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: ${activeMovements.size} | ` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${tradingStats.activePos—Åitions} | ` +
        `–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${tradingStats.totalTrades} | ` +
        `–ë–∞–ª–∞–Ω—Å: ${this.virtualTradingService.getVirtualBalance().toFixed(2)} USDT`,
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    if (activeMovements.size > 0) {
      const details: string[] = [];
      for (const [symbol, movement] of activeMovements) {
        const pointsCount = movement.points.length;
        const lastPoint = movement.points[movement.points.length - 1];
        const status = movement.status;
        details.push(`${symbol}(${pointsCount}—Ç–æ—á–µ–∫,${status})`);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
      const displayDetails = details.slice(0, 10);
      if (details.length > 10) {
        displayDetails.push(`...–∏ –µ—â–µ ${details.length - 10}`);
      }

      this.logger.log(`üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è: ${displayDetails.join(', ')}`);
    }
  }

  @Cron(CronExpression.EVERY_MINUTE)
  handleMinuteAnalysis(): void {
    if (this.isInitialized) {
      this.logActiveMovements();
      this.logTradingStatistics(); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
  }

  // –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  private logTradingStatistics(): void {
    const detailedStats = this.virtualTradingService.getDetailedTradingStats();

    if (detailedStats.totalTrades > 0 || detailedStats.activePos—Åitions > 0) {
      this.logger.log(
        `üí∞ –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (1 –º–∏–Ω) | ` +
          `–ë–∞–ª–∞–Ω—Å: ${detailedStats.balance.toFixed(2)} USDT | ` +
          `–î–Ω–µ–≤–Ω–æ–π PnL: ${detailedStats.dailyPnl >= 0 ? '+' : ''}${detailedStats.dailyPnl.toFixed(2)} USDT | ` +
          `–î–Ω–µ–≤–Ω–æ–π ROI: ${detailedStats.dailyROI >= 0 ? '+' : ''}${detailedStats.dailyROI.toFixed(2)}% | ` +
          `–û–±—â–∏–π ROI: ${detailedStats.totalROI >= 0 ? '+' : ''}${detailedStats.totalROI.toFixed(2)}%`,
      );

      this.logger.log(
        `üìä –î–ï–¢–ê–õ–ò | ` +
          `–°–¥–µ–ª–æ–∫: ${detailedStats.totalTrades} | ` +
          `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${detailedStats.activePos—Åitions} | ` +
          `–í–∏–Ω—Ä–µ–π—Ç: ${detailedStats.winRate.toFixed(1)}% | ` +
          `–ö–æ–º–∏—Å—Å–∏–∏: ${detailedStats.totalFees.toFixed(2)} USDT | ` +
          `–ß–∏—Å—Ç—ã–π PnL: ${detailedStats.netPnl >= 0 ? '+' : ''}${detailedStats.netPnl.toFixed(2)} USDT`,
      );
    } else {
      // –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å
      this.logger.log(
        `üí∞ –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê | ` +
          `–ë–∞–ª–∞–Ω—Å: ${detailedStats.balance.toFixed(2)} USDT | ` +
          `–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å–¥–µ–ª–æ–∫...`,
      );
    }
  }

  @Cron(CronExpression.EVERY_5_MINUTES)
  handleTradingStatistics(): void {
    if (this.isInitialized) {
      const detailedStats =
        this.virtualTradingService.getDetailedTradingStats();
      const activePositions = this.virtualTradingService.getActivePositions();

      if (detailedStats.totalTrades > 0) {
        this.logger.log(
          `üìà –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (5 –º–∏–Ω) | ` +
            `–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${detailedStats.totalTrades} | ` +
            `–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: ${detailedStats.winningTrades} | ` +
            `–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: ${detailedStats.losingTrades} | ` +
            `–í–∏–Ω—Ä–µ–π—Ç: ${detailedStats.winRate.toFixed(1)}%`,
        );

        this.logger.log(
          `üíµ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò | ` +
            `–°—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ${detailedStats.averageWin.toFixed(2)} USDT | ` +
            `–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à: ${detailedStats.averageLoss.toFixed(2)} USDT | ` +
            `–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä: ${detailedStats.profitFactor.toFixed(2)} | ` +
            `–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${detailedStats.totalFees.toFixed(2)} USDT`,
        );
      }



      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (activePositions.length > 0) {
        const positionsList = activePositions
          .slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
          .map((pos) => `${pos.symbol}(${pos.side})`)
          .join(', ');

        this.logger.log(
          `üî• –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò (${activePositions.length}): ${positionsList}${
            activePositions.length > 5
              ? `...–∏ –µ—â–µ ${activePositions.length - 5}`
              : ''
          }`,
        );
      }
    }
  }

  @Cron(CronExpression.EVERY_10_MINUTES)
  handleHealthCheck(): void {
    if (this.isInitialized) {
      const activeMovements = this.priceAnalysisService.getActiveMovements();
      const balance = this.virtualTradingService.getVirtualBalance();

      this.logger.log(
        `üíä –ó–î–û–†–û–í–¨–ï: –î–≤–∏–∂–µ–Ω–∏–π: ${activeMovements.size} | –ë–∞–ª–∞–Ω—Å: ${balance.toFixed(2)} USDT`,
      );
    }
  }

  getHello(): string {
    return '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–æ–∫–æ–≤–∏–∫–æ–≤ —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –∑–∞–ø—É—â–µ–Ω!';
  }

  getStatus(): any {
    const activeMovements = this.priceAnalysisService.getActiveMovements();
    const tradingStats = this.virtualTradingService.getTradingStats();
    const activePositions = this.virtualTradingService.getActivePositions();

    return {
      initialized: this.isInitialized,
      trackedSymbols: this.symbols.length,
      bufferStats: this.dataBufferService.getBufferStats(),
      activeMovements: activeMovements.size,
      trading: {
        enabled: true,
        balance: this.virtualTradingService.getVirtualBalance(),
        activePositions: activePositions.length,
        totalTrades: tradingStats.totalTrades,
        winRate: tradingStats.winRate,
        totalPnl: tradingStats.totalPnl,
      },
    };
  }

  // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getTradingStats() {
    return this.virtualTradingService.getTradingStats();
  }

  // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  getActivePositions() {
    return this.virtualTradingService.getActivePositions();
  }
}
