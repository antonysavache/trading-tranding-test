import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { BinanceService } from './modules/data/binance.service';
import { DataBufferService } from './modules/data/data-buffer.service';
import { WebSocketManagerService } from './modules/data/websocket-manager.service';
import { PriceAnalysisService } from './modules/analysis/price-analysis.service';
import { TradingService } from './modules/trading/trading.service';
import { LoggingService } from './shared';
import { KlineData } from './interfaces/kline.interface';

@Injectable()
export class AppService implements OnModuleInit {
  private readonly logger = new Logger(AppService.name);
  private isInitialized = false;
  private symbols: string[] = [];

  constructor(
    private binanceService: BinanceService,
    private dataBufferService: DataBufferService,
    private webSocketManagerService: WebSocketManagerService,
    private priceAnalysisService: PriceAnalysisService,
    private tradingService: TradingService,
    private loggingService: LoggingService,
  ) {}

  async onModuleInit() {
    try {
      await this.initializeApplication();
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  private async initializeApplication(): Promise<void> {
    this.logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–æ–∫–æ–≤–∏–∫–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
    const tradingPairs = await this.binanceService.getTopTradingPairs();
    this.symbols = tradingPairs.map(pair => pair.symbol);

    // üî• –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ BTCUSDT –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è BTC —Ç—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞
    if (!this.symbols.includes('BTCUSDT')) {
      this.symbols.unshift('BTCUSDT'); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      this.logger.log('üîß BTCUSDT –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ BTC —Ç—Ä–µ–Ω–¥–∞');
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    this.loggingService.info(
      `–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${this.symbols.length} —Å–∏–º–≤–æ–ª–æ–≤`,
      'AppService'
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket –ø–æ—Ç–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è multi-stream –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.webSocketManagerService.subscribeToMultipleKlines(
      this.symbols,
      (kline: KlineData) => this.handleKlineData(kline),
      (error: Error) => this.handleKlineError(error)
    );

    this.isInitialized = true;
    this.logger.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–æ–∫–æ–≤–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  }

  private async handleKlineData(kline: KlineData): Promise<void> {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –±—É—Ñ–µ—Ä
      this.dataBufferService.addKline(kline);

      // üî• –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º BTC —Ç—Ä–µ–Ω–¥ –µ—Å–ª–∏ —ç—Ç–æ BTCUSDT
      if (kline.symbol === 'BTCUSDT') {
        this.tradingService['btcTrendService']?.updateBTCPrice(kline);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
      const currentPrice = parseFloat(kline.close);
      this.tradingService.updatePositions(kline.symbol, currentPrice);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ)
      if (!this.dataBufferService.hasEnoughData(kline.symbol, 10)) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const klines = this.dataBufferService.getKlines(kline.symbol);
      
      // üî• –û–ë–ù–û–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–æ–∫–æ–≤–∏–∫–æ–≤ —Å Volume Profile (—Ç–µ–ø–µ—Ä—å async)
      const patterns = await this.priceAnalysisService.analyzeKlines(klines);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–∫–æ–≤–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
      for (const pattern of patterns) {
        // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–∫–æ–≤–∏–∫–∞
        const direction = pattern.direction === 'high_to_low_to_high' ? '–≤–æ–∑–≤—Ä–∞—Ç –∫ –º–∞–∫—Å–∏–º—É–º—É' : '–≤–æ–∑–≤—Ä–∞—Ç –∫ –º–∏–Ω–∏–º—É–º—É';
        this.logger.log(`üîÑ –ë–û–ö–û–í–ò–ö –ù–ê–ô–î–ï–ù: ${pattern.symbol} | ${direction}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
        this.loggingService.info(
          `–ë–æ–∫–æ–≤–∏–∫ –Ω–∞–π–¥–µ–Ω: ${pattern.symbol} | ${direction}`,
          'AppService'
        );

        // –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        const signal = await this.tradingService.processSidewaysPattern(pattern, currentPrice);
        if (signal) {
          const position = this.tradingService.openPosition(signal);
          this.logger.log(`üíº –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê: ${position.symbol} ${position.direction}`);
        }
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–ª—è ${kline.symbol}: ${error.message}`);
      this.loggingService.error(`${kline.symbol}: ${error.message}`, 'AppService');
    }
  }

  private handleKlineError(error: Error): void {
    this.logger.error('–û—à–∏–±–∫–∞ WebSocket:', error.message);
  }

  private logActiveMovements(): void {
    // –£–±—Ä–∞–ª–∏ —á–∞—Å—Ç—ã–µ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–∏–∫–∏
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –±–æ–∫–æ–≤–∏–∫–∞
  }

  private lastMovementLogTime = 0;

  private getLastMovementLogTime(): number {
    return this.lastMovementLogTime;
  }

  private setLastMovementLogTime(time: number): void {
    this.lastMovementLogTime = time;
  }

  @Cron(CronExpression.EVERY_MINUTE)
  handleMinuteAnalysis(): void {
    if (this.isInitialized) {
      this.logActiveMovements();
    }
  }

  @Cron(CronExpression.EVERY_MINUTE)
  handleStatistics(): void {
    if (this.isInitialized) {
      // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const tradingStats = this.tradingService.getTradingStats();
      if (tradingStats.closedTrades > 0) {
        this.logger.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–¥–µ–ª–æ–∫ ${tradingStats.closedTrades} | Win Rate: ${tradingStats.winRate.toFixed(1)}%`);
      }
    }
  }

  @Cron(CronExpression.EVERY_10_MINUTES)
  handleHealthCheck(): void {
    if (this.isInitialized) {
      const activeMovements = this.priceAnalysisService.getActiveMovements();
      
      // –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ —Å–ø–∞–º–∞
      if (activeMovements.size > 0) {
        this.logger.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π: ${activeMovements.size}`);
      }
    }
  }

  getHello(): string {
    return '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–æ–∫–æ–≤–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!';
  }

  getStatus(): any {
    const tradingStats = this.tradingService.getTradingStats();
    const openPositions = this.tradingService.getOpenPositions();
    const btcTrendAnalysis = this.tradingService['btcTrendService']?.getBTCTrendAnalysis();
    
    return {
      initialized: this.isInitialized,
      trackedSymbols: this.symbols.length,
      btcIncluded: this.symbols.includes('BTCUSDT'),
      bufferStats: this.dataBufferService.getBufferStats(),
      activeMovements: this.priceAnalysisService.getActiveMovements().size,
      sidewaysFound: 0, // –ü–æ–∫–∞ —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç AnalysisLoggingService
      btcTrend: btcTrendAnalysis ? {
        trend: btcTrendAnalysis.trend,
        ready: this.tradingService['btcTrendService']?.isReady() || false,
        ema20: btcTrendAnalysis.ema20?.toFixed(2),
        ema50: btcTrendAnalysis.ema50?.toFixed(2),
      } : {
        trend: 'NOT_INITIALIZED',
        ready: false,
      },
      trading: {
        stats: tradingStats,
        openPositions: openPositions.length,
        recentPositions: openPositions.slice(-5).map(pos => ({
          symbol: pos.symbol,
          direction: pos.direction,
          pnl: pos.unrealizedPnl.toFixed(2) + '%',
          entryPrice: pos.entryPrice,
          currentPrice: pos.currentPrice,
          // üÜï –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
          confirmation: pos.confirmation ? {
            btcTrend: pos.confirmation.btcTrend,
            volumeProfile: pos.confirmation.volumeProfile,
            overall: pos.confirmation.overall,
            icon: pos.confirmation.overall ? 'üü¢' : 'üü°',
            status: pos.confirmation.overall ? '–ü–û–õ–ù–û–ï' : '–ß–ê–°–¢–ò–ß–ù–û–ï',
          } : null,
        })),
      },
    };
  }
}
