import {Injectable, Logger} from '@nestjs/common';
import {ConfigService} from '@nestjs/config';
import {
    TradingPosition,
    TradingSignal,
    TradingStats,
    TradingConfig
} from '../../interfaces/trading.interface';
import {TrendPattern} from '../../interfaces/analysis.interface';
import {BTCTrendService} from './btc-trend.service';
import {v4 as uuidv4} from 'uuid';

@Injectable()
export class TrendTradingService {
    private readonly logger = new Logger(TrendTradingService.name);
    private readonly config: TradingConfig;

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    private readonly openPositions: Map<string, TradingPosition> = new Map();

    // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    private readonly closedPositions: TradingPosition[] = [];

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private stats: TradingStats = {
        totalTrades: 0,
        openTrades: 0,
        closedTrades: 0,
        winTrades: 0,
        lossTrades: 0,
        winRate: 0,
        totalPnl: 0,
        averagePnl: 0,
        maxWin: 0,
        maxLoss: 0,
    };

    constructor(
        private configService: ConfigService,
        private btcTrendService: BTCTrendService,
    ) {
        this.config = {
            enabled: this.configService.get<boolean>('trading.enabled', true),
            takeProfitPercent: this.configService.get<number>('trading.takeProfitPercent', 3.0), // –§–æ–ª–ª–±—ç–∫
            stopLossPercent: this.configService.get<number>('trading.stopLossPercent', 2.0), // –§–æ–ª–ª–±—ç–∫
            maxPositionsPerSymbol: this.configService.get<number>('trading.maxPositionsPerSymbol', 2),
            maxTotalPositions: this.configService.get<number>('trading.maxTotalPositions', 20),
            
            // üÜï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–û–ì–û TP/SL
            adaptive: {
                enabled: this.configService.get<boolean>('trading.adaptive.enabled', true),
                minStopLossPercent: this.configService.get<number>('trading.adaptive.minStopLossPercent', 0.5),
                maxStopLossPercent: this.configService.get<number>('trading.adaptive.maxStopLossPercent', 5.0),
                minTakeProfitPercent: this.configService.get<number>('trading.adaptive.minTakeProfitPercent', 1.0),
                maxTakeProfitPercent: this.configService.get<number>('trading.adaptive.maxTakeProfitPercent', 15.0),
                stopLossChannelFraction: this.configService.get<number>('trading.adaptive.stopLossChannelFraction', 0.3),
                takeProfitChannelFraction: this.configService.get<number>('trading.adaptive.takeProfitChannelFraction', 0.8),
                minRiskRewardRatio: this.configService.get<number>('trading.adaptive.minRiskRewardRatio', 1.5),
            },
        };

        const mode = this.config.adaptive?.enabled ? '–ê–î–ê–ü–¢–ò–í–ù–´–ô (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–∞)' : '–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô';
        this.logger.log(`Trend Trading Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω | –†–µ–∂–∏–º: ${mode}`);
        
        if (this.config.adaptive?.enabled) {
            this.logger.log(`üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: SL=${this.config.adaptive.stopLossChannelFraction*100}% –æ—Ç –∫–∞–Ω–∞–ª–∞, TP=${this.config.adaptive.takeProfitChannelFraction*100}% –æ—Ç –∫–∞–Ω–∞–ª–∞, R/R‚â•1:${this.config.adaptive.minRiskRewardRatio}`);
        } else {
            this.logger.log(`üìä –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: TP=${this.config.takeProfitPercent}%, SL=${this.config.stopLossPercent}%`);
        }
    }

    /**
     * üéØ –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
     */
    async processTrendPattern(pattern: TrendPattern, currentPrice: number): Promise<TradingSignal[]> {
        if (!this.config.enabled) {
            return [];
        }

        const signals: TradingSignal[] = [];

        // üéØ –ü–†–ò–ú–ï–ù–Ø–ï–ú BTC –§–ò–õ–¨–¢–†
        const btcTrendAnalysis = this.btcTrendService.getBTCTrendAnalysis();
        let btcPassed = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ—Å–ª–∏ BTC –∞–Ω–∞–ª–∏–∑ –Ω–µ –≥–æ—Ç–æ–≤

        if (btcTrendAnalysis) {
            // BTC —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
            btcPassed = true; // –ü–æ–∫–∞ —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
        }

        if (!btcPassed) {
            this.logger.log(`‚ùå –¢–†–ï–ù–î –û–¢–ö–õ–û–ù–ï–ù ${pattern.symbol}: BTC —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ—à–µ–ª`);
            return [];
        }

        // üéØ –°–û–ó–î–ê–ï–ú –°–ò–ì–ù–ê–õ–´ –î–õ–Ø LONG –ò SHORT –£–†–û–í–ù–ï–ô

        // 1. LONG —Å–∏–≥–Ω–∞–ª
        if (this.shouldCreateLongSignal(pattern, currentPrice)) {
            const longSignal = this.createLongSignal(pattern, currentPrice);
            if (longSignal) {
                signals.push(longSignal);
            }
        }

        // 2. SHORT —Å–∏–≥–Ω–∞–ª
        if (this.shouldCreateShortSignal(pattern, currentPrice)) {
            const shortSignal = this.createShortSignal(pattern, currentPrice);
            if (shortSignal) {
                signals.push(shortSignal);
            }
        }

        return signals;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å LONG —Å–∏–≥–Ω–∞–ª
     */
    private shouldCreateLongSignal(pattern: TrendPattern, currentPrice: number): boolean {
        const longLevel = pattern.nextLevels.long;
        const tolerance = longLevel * 0.001; // 0.1% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è LONG
        const priceAtLevel = Math.abs(currentPrice - longLevel) <= tolerance;

        if (priceAtLevel) {
            this.logger.debug(`${pattern.symbol}: –¶–µ–Ω–∞ ${currentPrice.toFixed(6)} –¥–æ—Å—Ç–∏–≥–ª–∞ LONG —É—Ä–æ–≤–Ω—è ${longLevel.toFixed(6)}`);
        }

        return priceAtLevel;
    }

    /**
     * üéØ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å SHORT —Å–∏–≥–Ω–∞–ª
     */
    private shouldCreateShortSignal(pattern: TrendPattern, currentPrice: number): boolean {
        const shortLevel = pattern.nextLevels.short;
        const tolerance = shortLevel * 0.001; // 0.1% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è SHORT
        const priceAtLevel = Math.abs(currentPrice - shortLevel) <= tolerance;

        if (priceAtLevel) {
            this.logger.debug(`${pattern.symbol}: –¶–µ–Ω–∞ ${currentPrice.toFixed(6)} –¥–æ—Å—Ç–∏–≥–ª–∞ SHORT —É—Ä–æ–≤–Ω—è ${shortLevel.toFixed(6)}`);
        }

        return priceAtLevel;
    }

    /**
     * üéØ –°–æ–∑–¥–∞–µ—Ç LONG —Å–∏–≥–Ω–∞–ª —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
     */
    private createLongSignal(pattern: TrendPattern, currentPrice: number): TradingSignal | null {
        if (!this.canOpenPosition(pattern.symbol)) {
            this.logger.debug(`${pattern.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è LONG`);
            return null;
        }

        // üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–°–ß–ï–¢ TP/SL –ù–ê –û–°–ù–û–í–ï –®–ò–†–ò–ù–´ –ö–ê–ù–ê–õ–ê
        const channelCalculation = this.calculateAdaptiveTPSL(pattern, currentPrice, 'LONG');

        const signal: TradingSignal = {
            symbol: pattern.symbol,
            direction: 'LONG',
            entryPrice: currentPrice,
            timestamp: Date.now(),
            reason: `–¢—Ä–µ–Ω–¥ ${pattern.trendDirection} | LONG –Ω–∞ —É—Ä–æ–≤–Ω–µ ${pattern.nextLevels.long.toFixed(6)} | –ö–∞–Ω–∞–ª: ${channelCalculation.channelWidthPercent.toFixed(2)}% | R/R: 1:${channelCalculation.riskRewardRatio.toFixed(1)}`,
            takeProfitPrice: Number(channelCalculation.takeProfitPrice.toFixed(8)),
            stopLossPrice: Number(channelCalculation.stopLossPrice.toFixed(8)),
            confirmation: {
                btcTrend: true,
                volumeProfile: true, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º VP —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç—Ä–µ–Ω–¥-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                overall: true,
            },
        };

        this.logger.log(`üü¢ LONG –°–ò–ì–ù–ê–õ [${pattern.trendDirection}] ${pattern.symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ ${pattern.nextLevels.long.toFixed(6)}`);
        this.logger.log(`üìä –ö–∞–Ω–∞–ª: ${channelCalculation.channelWidthPercent.toFixed(2)}% | TP: ${this.formatPrice(channelCalculation.takeProfitPrice)} | SL: ${this.formatPrice(channelCalculation.stopLossPrice)} | R/R: 1:${channelCalculation.riskRewardRatio.toFixed(1)}`);

        return signal;
    }

    /**
     * üéØ –°–æ–∑–¥–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
     */
    private createShortSignal(pattern: TrendPattern, currentPrice: number): TradingSignal | null {
        if (!this.canOpenPosition(pattern.symbol)) {
            this.logger.debug(`${pattern.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è SHORT`);
            return null;
        }

        // üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–°–ß–ï–¢ TP/SL –ù–ê –û–°–ù–û–í–ï –®–ò–†–ò–ù–´ –ö–ê–ù–ê–õ–ê
        const channelCalculation = this.calculateAdaptiveTPSL(pattern, currentPrice, 'SHORT');

        const signal: TradingSignal = {
            symbol: pattern.symbol,
            direction: 'SHORT',
            entryPrice: currentPrice,
            timestamp: Date.now(),
            reason: `–¢—Ä–µ–Ω–¥ ${pattern.trendDirection} | SHORT –Ω–∞ —É—Ä–æ–≤–Ω–µ ${pattern.nextLevels.short.toFixed(6)} | –ö–∞–Ω–∞–ª: ${channelCalculation.channelWidthPercent.toFixed(2)}% | R/R: 1:${channelCalculation.riskRewardRatio.toFixed(1)}`,
            takeProfitPrice: Number(channelCalculation.takeProfitPrice.toFixed(8)),
            stopLossPrice: Number(channelCalculation.stopLossPrice.toFixed(8)),
            confirmation: {
                btcTrend: true,
                volumeProfile: true,
                overall: true,
            },
        };

        this.logger.log(`üî¥ SHORT –°–ò–ì–ù–ê–õ [${pattern.trendDirection}] ${pattern.symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ ${pattern.nextLevels.short.toFixed(6)}`);
        this.logger.log(`üìä –ö–∞–Ω–∞–ª: ${channelCalculation.channelWidthPercent.toFixed(2)}% | TP: ${this.formatPrice(channelCalculation.takeProfitPrice)} | SL: ${this.formatPrice(channelCalculation.stopLossPrice)} | R/R: 1:${channelCalculation.riskRewardRatio.toFixed(1)}`);

        return signal;
    }

    /**
     * üéØ –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
     */
    private calculateAdaptiveTPSL(pattern: TrendPattern, entryPrice: number, direction: 'LONG' | 'SHORT'): {
        takeProfitPrice: number;
        stopLossPrice: number;
        channelWidthPercent: number;
        riskRewardRatio: number;
        method: string;
    } {
        // üéØ –í–´–ß–ò–°–õ–Ø–ï–ú –®–ò–†–ò–ù–£ –ö–ê–ù–ê–õ–ê –º–µ–∂–¥—É point1, point2, point3
        const channelWidth = this.calculateChannelWidth(pattern);
        const channelWidthPercent = (channelWidth / entryPrice) * 100;

        // üéØ –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –†–ê–°–ß–ï–¢–ê
        const settings = {
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã TP/SL
            minStopLossPercent: 0.5,   // –ú–∏–Ω–∏–º—É–º 0.5%
            maxStopLossPercent: 5.0,   // –ú–∞–∫—Å–∏–º—É–º 5%
            minTakeProfitPercent: 1.0, // –ú–∏–Ω–∏–º—É–º 1%
            maxTakeProfitPercent: 15.0, // –ú–∞–∫—Å–∏–º—É–º 15%
            
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
            stopLossChannelFraction: 0.3,  // SL = 30% –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
            takeProfitChannelFraction: 0.8, // TP = 80% –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Risk/Reward
            minRiskRewardRatio: 1.5,
        };

        // üéØ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –°–¢–û–ü-–õ–û–°–° (% –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞)
        let stopLossPercent = channelWidthPercent * settings.stopLossChannelFraction;
        stopLossPercent = Math.max(settings.minStopLossPercent, 
                          Math.min(settings.maxStopLossPercent, stopLossPercent));

        // üéØ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –¢–ï–ô–ö-–ü–†–û–§–ò–¢ (% –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞)
        let takeProfitPercent = channelWidthPercent * settings.takeProfitChannelFraction;
        takeProfitPercent = Math.max(settings.minTakeProfitPercent, 
                            Math.min(settings.maxTakeProfitPercent, takeProfitPercent));

        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ò –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú RISK/REWARD RATIO
        const currentRiskReward = takeProfitPercent / stopLossPercent;
        if (currentRiskReward < settings.minRiskRewardRatio) {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ R/R
            takeProfitPercent = stopLossPercent * settings.minRiskRewardRatio;
            takeProfitPercent = Math.min(settings.maxTakeProfitPercent, takeProfitPercent);
        }

        // üéØ –í–´–ß–ò–°–õ–Ø–ï–ú –¶–ï–ù–´ TP/SL
        let takeProfitPrice: number;
        let stopLossPrice: number;

        if (direction === 'LONG') {
            takeProfitPrice = entryPrice * (1 + takeProfitPercent / 100);
            stopLossPrice = entryPrice * (1 - stopLossPercent / 100);
        } else { // SHORT
            takeProfitPrice = entryPrice * (1 - takeProfitPercent / 100);
            stopLossPrice = entryPrice * (1 + stopLossPercent / 100);
        }

        const finalRiskReward = takeProfitPercent / stopLossPercent;

        return {
            takeProfitPrice,
            stopLossPrice,
            channelWidthPercent,
            riskRewardRatio: finalRiskReward,
            method: `–ö–∞–Ω–∞–ª: ${channelWidthPercent.toFixed(2)}% ‚Üí SL: ${stopLossPercent.toFixed(2)}% | TP: ${takeProfitPercent.toFixed(2)}%`
        };
    }

    /**
     * üéØ –í—ã—á–∏—Å–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –∫–∞–Ω–∞–ª–∞ –º–µ–∂–¥—É —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏ —Ç—Ä–µ–Ω–¥–∞
     */
    private calculateChannelWidth(pattern: TrendPattern): number {
        const prices = [pattern.point1.price, pattern.point2.price, pattern.point3.price];
        const maxPrice = Math.max(...prices);
        const minPrice = Math.min(...prices);
        
        // –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ = —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
        return maxPrice - minPrice;
    }
    openPosition(signal: TradingSignal): TradingPosition {
        const position: TradingPosition = {
            id: uuidv4(),
            symbol: signal.symbol,
            direction: signal.direction,
            entryPrice: signal.entryPrice,
            entryTime: signal.timestamp,
            currentPrice: signal.entryPrice,
            takeProfitPrice: signal.takeProfitPrice,
            stopLossPrice: signal.stopLossPrice,
            status: 'OPEN',
            unrealizedPnl: 0,
            triggerReason: signal.reason,
            confirmation: signal.confirmation,
        };

        this.openPositions.set(position.id, position);
        this.stats.totalTrades++;
        this.stats.openTrades++;

        const trendIcon = position.direction === 'LONG' ? 'üìà' : 'üìâ';
        this.logger.log(`üî• ${trendIcon} –¢–†–ï–ù–î –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê [${position.direction}] ${position.symbol} –ø–æ ${this.formatPrice(position.entryPrice)}`);
        this.logger.log(`üìä TP: ${this.formatPrice(position.takeProfitPrice)} | SL: ${this.formatPrice(position.stopLossPrice)}`);

        return position;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    updatePositions(symbol: string, currentPrice: number): void {
        const symbolPositions = Array.from(this.openPositions.values())
            .filter(pos => pos.symbol === symbol && pos.status === 'OPEN');

        for (const position of symbolPositions) {
            this.updatePosition(position, currentPrice);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
     */
    private updatePosition(position: TradingPosition, currentPrice: number): void {
        const oldPrice = position.currentPrice;
        position.currentPrice = currentPrice;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        if (position.direction === 'LONG') {
            position.unrealizedPnl = ((currentPrice - position.entryPrice) / position.entryPrice) * 100;
        } else {
            position.unrealizedPnl = ((position.entryPrice - currentPrice) / position.entryPrice) * 100;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        let shouldClose = false;
        let closeReason = '';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if (position.direction === 'LONG' && currentPrice >= position.takeProfitPrice) {
            shouldClose = true;
            closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
            position.status = 'CLOSED_TP';
        } else if (position.direction === 'SHORT' && currentPrice <= position.takeProfitPrice) {
            shouldClose = true;
            closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
            position.status = 'CLOSED_TP';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        if (position.direction === 'LONG' && currentPrice <= position.stopLossPrice) {
            shouldClose = true;
            closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
            position.status = 'CLOSED_SL';
        } else if (position.direction === 'SHORT' && currentPrice >= position.stopLossPrice) {
            shouldClose = true;
            closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
            position.status = 'CLOSED_SL';
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (shouldClose) {
            this.closePosition(position, currentPrice, closeReason);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
     */
    private closePosition(position: TradingPosition, closePrice: number, reason: string): void {
        position.closedPrice = closePrice;
        position.closedTime = Date.now();
        position.closeReason = reason;
        position.realizedPnl = position.unrealizedPnl;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.openTrades--;
        this.stats.closedTrades++;

        if (position.realizedPnl > 0) {
            this.stats.winTrades++;
            if (position.realizedPnl > this.stats.maxWin) {
                this.stats.maxWin = position.realizedPnl;
            }
        } else {
            this.stats.lossTrades++;
            if (position.realizedPnl < this.stats.maxLoss) {
                this.stats.maxLoss = position.realizedPnl;
            }
        }

        this.stats.totalPnl += position.realizedPnl;
        this.stats.winRate = (this.stats.winTrades / this.stats.closedTrades) * 100;
        this.stats.averagePnl = this.stats.totalPnl / this.stats.closedTrades;

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.closedPositions.push({...position});
        this.openPositions.delete(position.id);

        const emoji = position.status === 'CLOSED_TP' ? '‚úÖ' : '‚ùå';
        const pnlColor = position.realizedPnl > 0 ? '+' : '';

        this.logger.log(`${emoji} –¢–†–ï–ù–î –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê [${position.direction}] ${position.symbol} | ${pnlColor}${position.realizedPnl.toFixed(2)}% | ${reason}`);
        this.logger.log(`üìà –í—Ö–æ–¥: ${this.formatPrice(position.entryPrice)} ‚Üí –í—ã—Ö–æ–¥: ${this.formatPrice(closePrice)}`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    private canOpenPosition(symbol: string): boolean {
        const symbolPositions = Array.from(this.openPositions.values())
            .filter(pos => pos.symbol === symbol).length;

        return symbolPositions < this.config.maxPositionsPerSymbol;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    getTradingStats(): TradingStats {
        return {...this.stats};
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    getOpenPositions(): TradingPosition[] {
        return Array.from(this.openPositions.values());
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    getClosedPositions(): TradingPosition[] {
        return [...this.closedPositions];
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private formatPrice(price: number): string {
        if (price >= 1000) {
            return price.toFixed(2);
        } else if (price >= 1) {
            return price.toFixed(4);
        } else if (price >= 0.01) {
            return price.toFixed(6);
        } else {
            return price.toFixed(8);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    logTradingStats(): void {
        this.logger.log(`üìä –¢–†–ï–ù–î –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        this.logger.log(`   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.stats.totalTrades} | –û—Ç–∫—Ä—ã—Ç–æ: ${this.stats.openTrades} | –ó–∞–∫—Ä—ã—Ç–æ: ${this.stats.closedTrades}`);
        if (this.stats.closedTrades > 0) {
            this.logger.log(`   –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.winTrades} | –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.lossTrades} | Win Rate: ${this.stats.winRate.toFixed(1)}%`);
            this.logger.log(`   –û–±—â–∏–π PnL: ${this.stats.totalPnl.toFixed(2)}% | –°—Ä–µ–¥–Ω–∏–π PnL: ${this.stats.averagePnl.toFixed(2)}%`);
            this.logger.log(`   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: +${this.stats.maxWin.toFixed(2)}% | –•—É–¥—à–∞—è: ${this.stats.maxLoss.toFixed(2)}%`);
        }
    }
}
