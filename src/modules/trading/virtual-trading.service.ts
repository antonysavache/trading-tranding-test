import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Position, TradeSignal, TradingStats } from '../../interfaces/trading.interface';
import { SidewaysPattern } from '../../interfaces/analysis.interface';
import { KlineData } from '../../interfaces/kline.interface';

@Injectable()
export class VirtualTradingService {
  private readonly logger = new Logger(VirtualTradingService.name);
  private readonly positions: Map<string, Position> = new Map();
  private readonly closedPositions: Position[] = [];
  private readonly activeChannels: Map<string, SidewaysPattern> = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  private readonly takeProfitMultiplier: number;
  private readonly stopLossMultiplier: number;
  private readonly enabled: boolean;
  private readonly maxPositions: number;
  private readonly makerFeeRate: number;
  private readonly takerFeeRate: number;
  private virtualBalance: number = 10000; // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  private dailyPnl: number = 0;
  private dailyStartBalance: number = 10000;
  private totalFeespaid: number = 0; // –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π

  constructor(private configService: ConfigService) {
    this.takeProfitMultiplier = this.configService.get<number>('trading.takeProfitMultiplier', 1.05);
    this.stopLossMultiplier = this.configService.get<number>('trading.stopLossMultiplier', 0.95);
    this.enabled = this.configService.get<boolean>('trading.enabled', false);
    this.maxPositions = this.configService.get<number>('trading.maxPositions', 999);
    this.makerFeeRate = this.configService.get<number>('trading.fees.makerFeeRate', 0.0002);
    this.takerFeeRate = this.configService.get<number>('trading.fees.takerFeeRate', 0.0005);
    
    this.logger.log(`üéÆ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${this.enabled ? '–í–ö–õ–Æ–ß–ï–ù–ê' : '–í–´–ö–õ–Æ–ß–ï–ù–ê'}`);
    this.logger.log(`üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.virtualBalance} USDT`);
    this.logger.log(`üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –±–µ–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π`);
    this.logger.log(`üí∏ –ö–æ–º–∏—Å—Å–∏–∏: Maker ${(this.makerFeeRate * 100).toFixed(3)}%, Taker ${(this.takerFeeRate * 100).toFixed(3)}%`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–æ–∫–æ–≤–∏–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
  async processPattern(pattern: SidewaysPattern, currentPrice: number): Promise<void> {
    if (!this.enabled) return;

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç—Å–∫–æ–∫–æ–≤
      this.activeChannels.set(pattern.symbol, pattern);
      
      this.logger.log(
        `üìä –ê–ö–¢–ò–í–ù–´–ô –ö–ê–ù–ê–õ ${pattern.symbol} | ` +
        `–î–∏–∞–ø–∞–∑–æ–Ω: ${pattern.lowLevel.toFixed(6)} - ${pattern.highLevel.toFixed(6)} | ` +
        `–®–∏—Ä–∏–Ω–∞: ${pattern.channelWidthPercent.toFixed(2)}%`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å—Ä–∞–∑—É –≤–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É
      await this.checkForTradeEntry(pattern.symbol, currentPrice);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern.symbol}: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
  private async checkForTradeEntry(symbol: string, currentPrice: number): Promise<void> {
    const channel = this.activeChannels.get(symbol);
    if (!channel) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞
    if (this.isNearChannelBoundary(channel, currentPrice)) {
      const signal = this.createTradeSignal(channel, currentPrice);
      await this.executeSignal(signal, currentPrice);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–∫–æ–≤–∏–∫–∞
  private createTradeSignal(pattern: SidewaysPattern, currentPrice: number): TradeSignal {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–æ—Ç—Å–∫–æ–∫ –æ—Ç —É—Ä–æ–≤–Ω—è)
    const direction = this.getTradeDirection(pattern, currentPrice);
    
    // –í—ã—Å–æ—Ç–∞ –∫–∞–Ω–∞–ª–∞
    const channelHeight = pattern.highLevel - pattern.lowLevel;
    
    let takeProfit: number;
    let stopLoss: number;
    
    if (direction === 'LONG') {
      // LONG –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã: 
      // TP = –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
      // SL = –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
      const targetMove = channelHeight * this.takeProfitMultiplier;
      const stopMove = channelHeight * this.stopLossMultiplier;
      
      takeProfit = currentPrice + targetMove;
      stopLoss = currentPrice - stopMove;
    } else {
      // SHORT –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã:
      // TP = –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º  
      // SL = –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
      const targetMove = channelHeight * this.takeProfitMultiplier;
      const stopMove = channelHeight * this.stopLossMultiplier;
      
      takeProfit = currentPrice - targetMove;
      stopLoss = currentPrice + stopMove;
    }

    return {
      symbol: pattern.symbol,
      action: direction === 'LONG' ? 'OPEN_LONG' : 'OPEN_SHORT',
      price: currentPrice,
      timestamp: Date.now(),
      channelWidth: pattern.channelWidthPercent,
      reason: `–û—Ç—Å–∫–æ–∫ –æ—Ç ${direction === 'LONG' ? '–Ω–∏–∂–Ω–µ–π' : '–≤–µ—Ä—Ö–Ω–µ–π'} –≥—Ä–∞–Ω–∏—Ü—ã –±–æ–∫–æ–≤–∏–∫–∞`,
      takeProfit,
      stopLoss,
    };
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  private getTradeDirection(pattern: SidewaysPattern, currentPrice: number): 'LONG' | 'SHORT' {
    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –¢–æ—Ä–≥—É–µ–º –æ—Ç—Å–∫–æ–∫–∏ –æ—Ç —É—Ä–æ–≤–Ω–µ–π –±–æ–∫–æ–≤–∏–∫–∞
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º SHORT (–æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑)
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º LONG (–æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö)
    
    const distanceToHigh = Math.abs(currentPrice - pattern.highLevel);
    const distanceToLow = Math.abs(currentPrice - pattern.lowLevel);
    
    if (distanceToHigh < distanceToLow) {
      return 'SHORT'; // –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑
    } else {
      return 'LONG'; // –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–∞–ª–∞
  private isNearChannelBoundary(pattern: SidewaysPattern, currentPrice: number): boolean {
    const channelHeight = pattern.highLevel - pattern.lowLevel;
    const threshold = channelHeight * 0.05; // 5% –æ—Ç –≤—ã—Å–æ—Ç—ã –∫–∞–Ω–∞–ª–∞ (—Å—Ç—Ä–æ–∂–µ –¥–ª—è 5m)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
    const distanceToHigh = Math.abs(currentPrice - pattern.highLevel);
    const distanceToLow = Math.abs(currentPrice - pattern.lowLevel);
    
    return distanceToHigh <= threshold || distanceToLow <= threshold;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  private async executeSignal(signal: TradeSignal, currentPrice: number): Promise<void> {
    const existingPosition = this.positions.get(signal.symbol);

    if (existingPosition) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      const currentDirection = existingPosition.side;
      const newDirection = signal.action === 'OPEN_LONG' ? 'LONG' : 'SHORT';
      
      if (currentDirection === newDirection) {
        this.logger.debug(`‚Ü©Ô∏è ${signal.symbol}: –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è ${currentDirection}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
        return;
      }

      // –†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏
      await this.reversePosition(existingPosition, signal, currentPrice);
    } else {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–±–µ–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
      await this.openPosition(signal, currentPrice);
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
  private async openPosition(signal: TradeSignal, currentPrice: number): Promise<void> {
    const positionSize = this.calculatePositionSize(signal);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ (–∫–∞–∫ —Ç–µ–π–∫–µ—Ä - market order)
    const openFee = positionSize * currentPrice * this.takerFeeRate;
    
    const position: Position = {
      id: this.generatePositionId(),
      symbol: signal.symbol,
      side: signal.action === 'OPEN_LONG' ? 'LONG' : 'SHORT',
      entryPrice: currentPrice,
      quantity: positionSize,
      entryTime: signal.timestamp,
      takeProfit: signal.takeProfit,
      stopLoss: signal.stopLoss,
      channelWidth: signal.channelWidth,
      status: 'OPEN',
    };

    this.positions.set(signal.symbol, position);

    // –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    this.virtualBalance -= openFee;
    this.totalFeespaid += openFee;

    this.logger.log(
      `üöÄ –û–¢–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø ${position.side} ${signal.symbol} | ` +
      `–¶–µ–Ω–∞: ${currentPrice.toFixed(6)} | ` +
      `TP: ${signal.takeProfit.toFixed(6)} | ` +
      `SL: ${signal.stopLoss.toFixed(6)} | ` +
      `–ö–∞–Ω–∞–ª: ${signal.channelWidth.toFixed(2)}% | ` +
      `–ö–æ–º–∏—Å—Å–∏—è: ${openFee.toFixed(2)} USDT`
    );
  }

  // –†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏
  private async reversePosition(existingPosition: Position, signal: TradeSignal, currentPrice: number): Promise<void> {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    await this.closePosition(existingPosition, currentPrice, 'REVERSE');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    await this.openPosition(signal, currentPrice);
    
    this.logger.log(`üîÑ –†–ê–ó–í–û–†–û–¢ ${signal.symbol}: ${existingPosition.side} ‚Üí ${signal.action === 'OPEN_LONG' ? 'LONG' : 'SHORT'}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–≤–µ—á–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤
  async checkPositionsOnCandle(kline: KlineData): Promise<void> {
    if (!this.enabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    await this.checkExistingPositions(kline);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
    await this.checkForTradeEntry(kline.symbol, parseFloat(kline.close));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
  private async checkExistingPositions(kline: KlineData): Promise<void> {
    const position = this.positions.get(kline.symbol);
    if (!position) return;

    const high = parseFloat(kline.high);
    const low = parseFloat(kline.low);
    const close = parseFloat(kline.close);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    if (
      (position.side === 'LONG' && high >= position.takeProfit) ||
      (position.side === 'SHORT' && low <= position.takeProfit)
    ) {
      await this.closePosition(position, position.takeProfit, 'TAKE_PROFIT');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
    if (
      (position.side === 'LONG' && low <= position.stopLoss) ||
      (position.side === 'SHORT' && high >= position.stopLoss)
    ) {
      await this.closePosition(position, position.stopLoss, 'STOP_LOSS');
      return;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  private async closePosition(
    position: Position, 
    closePrice: number, 
    reason: 'TAKE_PROFIT' | 'STOP_LOSS' | 'REVERSE' | 'MANUAL'
  ): Promise<void> {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (–∫–∞–∫ —Ç–µ–π–∫–µ—Ä - market order)
    const closeFee = position.quantity * closePrice * this.takerFeeRate;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –¥–æ –∫–æ–º–∏—Å—Å–∏–π
    const grossPnl = this.calculatePnL(position, closePrice);
    
    // –ò—Ç–æ–≥–æ–≤—ã–π PnL —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    const netPnl = grossPnl - closeFee;
    
    position.status = 'CLOSED';
    position.closePrice = closePrice;
    position.closeTime = Date.now();
    position.pnl = netPnl; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç—ã–π PnL
    position.reason = reason;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (PnL —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é)
    this.virtualBalance += netPnl;
    this.dailyPnl += netPnl;
    this.totalFeespaid += closeFee;

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    this.closedPositions.push({ ...position });
    this.positions.delete(position.symbol);

    const emoji = netPnl > 0 ? 'üíö' : '‚ù§Ô∏è';
    const reasonEmoji = {
      'TAKE_PROFIT': 'üéØ',
      'STOP_LOSS': '‚õî',
      'REVERSE': 'üîÑ',
      'MANUAL': 'üë§'
    }[reason];

    this.logger.log(
      `${emoji} –ó–ê–ö–†–´–¢–ê –ü–û–ó–ò–¶–ò–Ø ${position.side} ${position.symbol} | ` +
      `${reasonEmoji} ${reason} | ` +
      `PnL: ${grossPnl.toFixed(2)} USDT | ` +
      `–ö–æ–º–∏—Å—Å–∏—è: ${closeFee.toFixed(2)} USDT | ` +
      `–ß–∏—Å—Ç—ã–π PnL: ${netPnl.toFixed(2)} USDT | ` +
      `–ë–∞–ª–∞–Ω—Å: ${this.virtualBalance.toFixed(2)} USDT`
    );
  }

  // –†–∞—Å—á–µ—Ç PnL
  private calculatePnL(position: Position, closePrice: number): number {
    const priceDiff = closePrice - position.entryPrice;
    const multiplier = position.side === 'LONG' ? 1 : -1;
    return priceDiff * multiplier * position.quantity;
  }

  // –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
  private calculatePositionSize(signal: TradeSignal): number {
    const positionSizePercent = this.configService.get<number>('trading.positionSizePercent', 1);
    const positionValue = (this.virtualBalance * positionSizePercent) / 100;
    return positionValue / signal.price;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–æ–∑–∏—Ü–∏–∏
  private generatePositionId(): string {
    return `pos_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getTradingStats(): TradingStats {
    const totalTrades = this.closedPositions.length;
    const winningTrades = this.closedPositions.filter(p => (p.pnl || 0) > 0).length;
    const losingTrades = this.closedPositions.filter(p => (p.pnl || 0) < 0).length;
    const totalPnl = this.closedPositions.reduce((sum, p) => sum + (p.pnl || 0), 0);
    
    const wins = this.closedPositions.filter(p => (p.pnl || 0) > 0);
    const losses = this.closedPositions.filter(p => (p.pnl || 0) < 0);
    
    const averageWin = wins.length > 0 ? wins.reduce((sum, p) => sum + (p.pnl || 0), 0) / wins.length : 0;
    const averageLoss = losses.length > 0 ? losses.reduce((sum, p) => sum + (p.pnl || 0), 0) / losses.length : 0;
    
    const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;
    const profitFactor = Math.abs(averageLoss) > 0 ? averageWin / Math.abs(averageLoss) : 0;

    return {
      totalTrades,
      winningTrades,
      losingTrades,
      totalPnl,
      winRate,
      averageWin,
      averageLoss,
      profitFactor,
      maxDrawdown: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
      activePos—Åitions: this.positions.size,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  getActivePositions(): Position[] {
    return Array.from(this.positions.values());
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  getClosedPositions(): Position[] {
    return this.closedPositions;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
  getVirtualBalance(): number {
    return this.virtualBalance;
  }

  // –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ 00:00)
  resetDailyStats(): void {
    this.dailyPnl = 0;
    this.dailyStartBalance = this.virtualBalance;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
  getDailyPnl(): number {
    return this.dailyPnl;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ–º–∏—Å—Å–∏–π
  getTotalFeesPaid(): number {
    return this.totalFeespaid;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
  getDetailedTradingStats() {
    const stats = this.getTradingStats();
    const grossPnl = stats.totalPnl + this.totalFeespaid; // PnL –¥–æ –∫–æ–º–∏—Å—Å–∏–π
    
    return {
      ...stats,
      balance: this.virtualBalance,
      grossPnl: grossPnl,
      netPnl: stats.totalPnl,
      totalFees: this.totalFeespaid,
      dailyPnl: this.dailyPnl,
      dailyROI: this.dailyStartBalance > 0 ? (this.dailyPnl / this.dailyStartBalance) * 100 : 0,
      totalROI: ((this.virtualBalance - 10000) / 10000) * 100,
    };
  }
}
