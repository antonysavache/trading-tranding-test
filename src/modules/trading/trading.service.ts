import {Injectable, Logger} from '@nestjs/common';
import {ConfigService} from '@nestjs/config';
import {
    TradingPosition,
    TradingSignal,
    TradingStats,
    TradingConfig
} from '../../interfaces/trading.interface';
import {SidewaysPattern} from '../../interfaces/analysis.interface';
import {BTCTrendService} from './btc-trend.service';
import {OrderBookAnalysisService} from '../analysis/orderbook-analysis.service';
import {SignalService, TradingSignal as GoogleSheetsSignal} from '../../shared';
import {v4 as uuidv4} from 'uuid';

@Injectable()
export class TradingService {
    private readonly logger = new Logger(TradingService.name);
    private readonly config: TradingConfig;

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    private readonly openPositions: Map<string, TradingPosition> = new Map();

    // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    private readonly closedPositions: TradingPosition[] = [];

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private stats: TradingStats = {
        totalTrades: 0,
        openTrades: 0,
        closedTrades: 0,
        winTrades: 0,
        lossTrades: 0,
        winRate: 0,
        totalPnl: 0,
        averagePnl: 0,
        maxWin: 0,
        maxLoss: 0,
    };

    constructor(
        private configService: ConfigService,
        private btcTrendService: BTCTrendService,
        private orderBookService: OrderBookAnalysisService,
        private signalService: SignalService,
    ) {
        this.config = {
            enabled: this.configService.get<boolean>('trading.enabled', true),
            takeProfitPercent: this.configService.get<number>('trading.takeProfitPercent', 2.0), // 2%
            stopLossPercent: this.configService.get<number>('trading.stopLossPercent', 2.0), // 2% (—Ä–∞–≤–Ω–æ –¢–ü)
            maxPositionsPerSymbol: this.configService.get<number>('trading.maxPositionsPerSymbol', 1),
            maxTotalPositions: this.configService.get<number>('trading.maxTotalPositions', 10),
        };

        this.logger.log(`Trading Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: TP=${this.config.takeProfitPercent}%, SL=${this.config.stopLossPercent}%`);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–æ–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
     * üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ü–û–°–õ–ï –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–æ–∫–æ–≤–∏–∫–∞
     */
    async processSidewaysPattern(pattern: SidewaysPattern, currentPrice: number): Promise<TradingSignal | null> {
        if (!this.config.enabled) {
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π
        if (!this.canOpenPosition(pattern.symbol)) {
            this.logger.debug(`${pattern.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π`);
            return null;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        let direction: 'LONG' | 'SHORT';
        let reason: string;

        if (pattern.direction === 'low_to_high_to_low') {
            direction = 'LONG';
            reason = `–ë–æ–∫–æ–≤–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –Ω–∏–∑—É (${pattern.startPrice.toFixed(6)} ‚Üí ${pattern.middlePrice.toFixed(6)} ‚Üí ${currentPrice.toFixed(6)})`;
        } else {
            direction = 'SHORT';
            reason = `–ë–æ–∫–æ–≤–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –≤–µ—Ä—Ö—É (${pattern.startPrice.toFixed(6)} ‚Üí ${pattern.middlePrice.toFixed(6)} ‚Üí ${currentPrice.toFixed(6)})`;
        }

        // üî• –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ
        const existingPosition = this.getPositionBySymbol(pattern.symbol);
        if (existingPosition && existingPosition.direction !== direction) {
            this.closePositionByReversal(existingPosition, currentPrice, `–°–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞: ${existingPosition.direction} ‚Üí ${direction}`);
            this.logger.log(
                `üîÑ –°–ú–ï–ù–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø [${existingPosition.direction} ‚Üí ${direction}] ${pattern.symbol} | ` +
                `–°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ ${currentPrice.toFixed(6)}`
            );
        }

        // üÜï –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–´: VP –∏ BTC
        const confirmation = {
            btcTrend: false,       // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–∞–ª—å–Ω–æ
            volumeProfile: true,   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true  
            overall: false
        };

        const filterResults: string[] = [];

        // 1. BTC —Ç—Ä–µ–Ω–¥ —Ñ–∏–ª—å—Ç—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        const btcTrendAnalysis = this.btcTrendService.getBTCTrendAnalysis();
        let btcPassed = false;

        if (btcTrendAnalysis) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ BTC —Ç—Ä–µ–Ω–¥–∞
            btcPassed = this.btcTrendService.isDirectionAllowed(direction);
            confirmation.btcTrend = btcPassed;

            if (btcPassed) {
                filterResults.push(`BTC: ‚úÖ ${btcTrendAnalysis.trend}`);
            } else {
                filterResults.push(`BTC: ‚ùå ${btcTrendAnalysis.trend} (${direction} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω)`);
            }
        } else {
            // –ï—Å–ª–∏ BTC –∞–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
            btcPassed = true;
            confirmation.btcTrend = true;
            filterResults.push(`BTC: ‚úÖ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ)`);
        }

        // 2. Volume Profile —Ñ–∏–ª—å—Ç—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ
        let vpPassed = false;
        try {
            vpPassed = await this.validateWithVolumeProfile(pattern);
            confirmation.volumeProfile = vpPassed;

            if (vpPassed) {
                filterResults.push(`VP: ‚úÖ`);
            } else {
                filterResults.push(`VP: ‚ùå`);
            }
        } catch (error) {
            confirmation.volumeProfile = false;
            filterResults.push(`VP: ‚ö†Ô∏è –æ—à–∏–±–∫–∞`);
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Order Book –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–µ true/false)
        let orderBookConfirmed = false;
        try {
            const orderBookAnalysis = await this.orderBookService.getOrderBookAnalysis(pattern.symbol);
            orderBookConfirmed = this.orderBookService.isDirectionSupported(direction, orderBookAnalysis);

            if (orderBookConfirmed) {
                filterResults.push(`OrderBook: ‚úÖ`);
            } else {
                filterResults.push(`OrderBook: ‚ùå`);
            }
        } catch (error) {
            filterResults.push(`OrderBook: ‚ö†Ô∏è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            orderBookConfirmed = false;
        }

        // 4. –û–±—â–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ order book –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç
        confirmation.overall = orderBookConfirmed;

        // üÜï –õ–û–ì–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –§–ò–õ–¨–¢–†–û–í
        this.logger.log(`üîç –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–û–í [${direction}] ${pattern.symbol}: ${filterResults.join(' | ')}`);

        // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ò–¢–ò–ß–ù–´–ï –§–ò–õ–¨–¢–†–´ (BTC –∏ VP)
        if (!btcPassed) {
            this.logger.log(`‚ùå –ë–û–ö–û–í–ò–ö –û–¢–ö–õ–û–ù–ï–ù ${pattern.symbol}: BTC —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ—à–µ–ª (${direction} –ø—Ä–∏ ${btcTrendAnalysis?.trend || 'UNKNOWN'} —Ç—Ä–µ–Ω–¥–µ)`);
            return null; // –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        }

        if (!vpPassed) {
            this.logger.log(`‚ùå –ë–û–ö–û–í–ò–ö –û–¢–ö–õ–û–ù–ï–ù ${pattern.symbol}: VP —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ—à–µ–ª`);
            return null; // –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
        }

        this.logger.log(`‚úÖ –ë–û–ö–û–í–ò–ö –ü–†–ò–ù–Ø–¢ ${pattern.symbol}: –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã`);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ TP –∏ SL
        const takeProfitPrice = direction === 'LONG'
            ? currentPrice * (1 + this.config.takeProfitPercent / 100)
            : currentPrice * (1 - this.config.takeProfitPercent / 100);

        const stopLossPrice = direction === 'LONG'
            ? currentPrice * (1 - this.config.stopLossPercent / 100)
            : currentPrice * (1 + this.config.stopLossPercent / 100);

        const signal: TradingSignal = {
            symbol: pattern.symbol,
            direction,
            entryPrice: currentPrice,
            timestamp: Date.now(),
            reason: `${reason} | –§–∏–ª—å—Ç—Ä—ã: ${filterResults.join(', ')}`,
            takeProfitPrice: Number(takeProfitPrice.toFixed(8)),
            stopLossPrice: Number(stopLossPrice.toFixed(8)),
            sidewaysPattern: pattern,
            confirmation: confirmation,
        };

        // üÜï –õ–û–ì–ò–†–£–ï–ú –°–û–ó–î–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–ê
        const confirmIcon = confirmation.overall ? 'üü¢' : 'üü°';
        this.logger.log(
            `${confirmIcon} –°–ò–ì–ù–ê–õ –°–û–ó–î–ê–ù [${direction}] ${pattern.symbol} | ` +
            `–§–∏–ª—å—Ç—Ä—ã: ${filterResults.join(' | ')}`
        );

        return signal;
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–≥–Ω–∞–ª—É
     */
    openPosition(signal: TradingSignal): TradingPosition {
        const position: TradingPosition = {
            id: uuidv4(),
            symbol: signal.symbol,
            direction: signal.direction,
            entryPrice: signal.entryPrice,
            entryTime: signal.timestamp,
            currentPrice: signal.entryPrice,
            takeProfitPrice: signal.takeProfitPrice,
            stopLossPrice: signal.stopLossPrice,
            status: 'OPEN',
            unrealizedPnl: 0,
            triggerReason: signal.reason,
            confirmation: signal.confirmation, // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
        };

        this.openPositions.set(position.id, position);
        this.stats.totalTrades++;
        this.stats.openTrades++;

        // üÜï –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        const confirmIcon = position.confirmation.overall ? 'üü¢' : 'üü°';
        const confirmText = position.confirmation.overall ? '–ü–û–õ–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï' : '–ß–ê–°–¢–ò–ß–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï';

        this.logger.log(`üî• ${confirmIcon} –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê [${position.direction}] ${position.symbol} –ø–æ ${this.formatPrice(position.entryPrice)} | ${confirmText}`);
        this.logger.log(`üìä TP: ${this.formatPrice(position.takeProfitPrice)} | SL: ${this.formatPrice(position.stopLossPrice)}`);
        this.logger.log(`üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: BTC=${position.confirmation.btcTrend ? '‚úÖ' : '‚ùå'} | VP=${position.confirmation.volumeProfile ? '‚úÖ' : '‚ùå'} | OrderBook=${position.confirmation.overall ? '‚úÖ' : '‚ùå'}`);

        // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ Google Sheets
        this.saveSignalToGoogleSheets(signal, position);

        return position;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    updatePositions(symbol: string, currentPrice: number): void {
        const symbolPositions = Array.from(this.openPositions.values())
            .filter(pos => pos.symbol === symbol && pos.status === 'OPEN');

        for (const position of symbolPositions) {
            this.updatePosition(position, currentPrice);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
     */
    private updatePosition(position: TradingPosition, currentPrice: number): void {
        const oldPrice = position.currentPrice;
        position.currentPrice = currentPrice;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        if (position.direction === 'LONG') {
            position.unrealizedPnl = ((currentPrice - position.entryPrice) / position.entryPrice) * 100;
        } else {
            position.unrealizedPnl = ((position.entryPrice - currentPrice) / position.entryPrice) * 100;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        let shouldClose = false;
        let closeReason = '';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if (position.direction === 'LONG' && currentPrice >= position.takeProfitPrice) {
            shouldClose = true;
            closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
            position.status = 'CLOSED_TP';
        } else if (position.direction === 'SHORT' && currentPrice <= position.takeProfitPrice) {
            shouldClose = true;
            closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
            position.status = 'CLOSED_TP';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        if (position.direction === 'LONG' && currentPrice <= position.stopLossPrice) {
            shouldClose = true;
            closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
            position.status = 'CLOSED_SL';
        } else if (position.direction === 'SHORT' && currentPrice >= position.stopLossPrice) {
            shouldClose = true;
            closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
            position.status = 'CLOSED_SL';
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (shouldClose) {
            this.closePosition(position, currentPrice, closeReason);
        } else {
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ PnL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            const priceChangePercent = Math.abs((currentPrice - oldPrice) / oldPrice) * 100;
            if (priceChangePercent > 0.1) { // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.1%
                this.logger.debug(`üíπ ${position.symbol} [${position.direction}] PnL: ${position.unrealizedPnl.toFixed(2)}% | –¶–µ–Ω–∞: ${this.formatPrice(currentPrice)}`);
            }
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
     */
    private closePosition(position: TradingPosition, closePrice: number, reason: string): void {
        position.closedPrice = closePrice;
        position.closedTime = Date.now();
        position.closeReason = reason;
        position.realizedPnl = position.unrealizedPnl;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.openTrades--;
        this.stats.closedTrades++;

        if (position.realizedPnl > 0) {
            this.stats.winTrades++;
            if (position.realizedPnl > this.stats.maxWin) {
                this.stats.maxWin = position.realizedPnl;
            }
        } else {
            this.stats.lossTrades++;
            if (position.realizedPnl < this.stats.maxLoss) {
                this.stats.maxLoss = position.realizedPnl;
            }
        }

        this.stats.totalPnl += position.realizedPnl;
        this.stats.winRate = (this.stats.winTrades / this.stats.closedTrades) * 100;
        this.stats.averagePnl = this.stats.totalPnl / this.stats.closedTrades;

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.closedPositions.push({...position});
        this.openPositions.delete(position.id);

        const emoji = position.status === 'CLOSED_TP' ? '‚úÖ' : '‚ùå';
        const pnlColor = position.realizedPnl > 0 ? '+' : '';

        this.logger.log(`${emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê [${position.direction}] ${position.symbol} | ${pnlColor}${position.realizedPnl.toFixed(2)}% | ${reason}`);
        this.logger.log(`üìà –í—Ö–æ–¥: ${this.formatPrice(position.entryPrice)} ‚Üí –í—ã—Ö–æ–¥: ${this.formatPrice(closePrice)}`);

        // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets
        this.updateSignalResultInGoogleSheets(position);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        if (this.stats.closedTrades % 5 === 0) {
            this.logTradingStats();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    private canOpenPosition(symbol: string): boolean {
        const symbolPositions = Array.from(this.openPositions.values())
            .filter(pos => pos.symbol === symbol).length;

        // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π - —Ç–µ–ø–µ—Ä—å –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å–∏–º–≤–æ–ª—É
        return symbolPositions < this.config.maxPositionsPerSymbol;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    getTradingStats(): TradingStats {
        return {...this.stats};
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    logTradingStats(): void {
        this.logger.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
        this.logger.log(`   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.stats.totalTrades} | –û—Ç–∫—Ä—ã—Ç–æ: ${this.stats.openTrades} | –ó–∞–∫—Ä—ã—Ç–æ: ${this.stats.closedTrades}`);
        if (this.stats.closedTrades > 0) {
            this.logger.log(`   –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.winTrades} | –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.lossTrades} | Win Rate: ${this.stats.winRate.toFixed(1)}%`);
            this.logger.log(`   –û–±—â–∏–π PnL: ${this.stats.totalPnl.toFixed(2)}% | –°—Ä–µ–¥–Ω–∏–π PnL: ${this.stats.averagePnl.toFixed(2)}%`);
            this.logger.log(`   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: +${this.stats.maxWin.toFixed(2)}% | –•—É–¥—à–∞—è: ${this.stats.maxLoss.toFixed(2)}%`);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    getOpenPositions(): TradingPosition[] {
        return Array.from(this.openPositions.values());
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    getClosedPositions(): TradingPosition[] {
        return [...this.closedPositions];
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    getPositionBySymbol(symbol: string): TradingPosition | null {
        const positions = Array.from(this.openPositions.values()).filter(pos => pos.symbol === symbol);
        return positions.length > 0 ? positions[0] : null;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
     */
    getPositionsBySymbol(symbol: string): TradingPosition[] {
        return Array.from(this.openPositions.values()).filter(pos => pos.symbol === symbol);
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞
     */
    private closePositionByReversal(position: TradingPosition, closePrice: number, reason: string): void {
        position.closedPrice = closePrice;
        position.closedTime = Date.now();
        position.closeReason = reason;
        position.status = 'CLOSED_SL'; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é –ø–æ –≤–Ω–µ—à–Ω–µ–π –ø—Ä–∏—á–∏–Ω–µ

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL
        if (position.direction === 'LONG') {
            position.realizedPnl = ((closePrice - position.entryPrice) / position.entryPrice) * 100;
        } else {
            position.realizedPnl = ((position.entryPrice - closePrice) / position.entryPrice) * 100;
        }

        position.unrealizedPnl = position.realizedPnl;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.openTrades--;
        this.stats.closedTrades++;

        if (position.realizedPnl > 0) {
            this.stats.winTrades++;
            if (position.realizedPnl > this.stats.maxWin) {
                this.stats.maxWin = position.realizedPnl;
            }
        } else {
            this.stats.lossTrades++;
            if (position.realizedPnl < this.stats.maxLoss) {
                this.stats.maxLoss = position.realizedPnl;
            }
        }

        this.stats.totalPnl += position.realizedPnl;
        this.stats.winRate = this.stats.closedTrades > 0 ? (this.stats.winTrades / this.stats.closedTrades) * 100 : 0;
        this.stats.averagePnl = this.stats.closedTrades > 0 ? this.stats.totalPnl / this.stats.closedTrades : 0;

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.closedPositions.push({...position});
        this.openPositions.delete(position.id);

        const emoji = position.realizedPnl > 0 ? 'üîÑ‚úÖ' : 'üîÑ‚ùå';
        const pnlColor = position.realizedPnl > 0 ? '+' : '';

        this.logger.log(`${emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê –ü–û –°–ú–ï–ù–ï –¢–†–ï–ù–î–ê [${position.direction}] ${position.symbol} | ${pnlColor}${position.realizedPnl.toFixed(2)}% | ${reason}`);
        this.logger.log(`üìà –í—Ö–æ–¥: ${this.formatPrice(position.entryPrice)} ‚Üí –í—ã—Ö–æ–¥: ${this.formatPrice(closePrice)}`);

        // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets
        this.updateSignalResultInGoogleSheets(position);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ Google Sheets –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "page"
     */
    private async saveSignalToGoogleSheets(signal: TradingSignal, position: TradingPosition): Promise<void> {
        try {
            const googleSheetsSignal: GoogleSheetsSignal = {
                date: new Date().toISOString().split('T')[0], // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                symbol: signal.symbol,
                VP: signal.confirmation.volumeProfile, // Volume Profile –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                BTC: signal.confirmation.btcTrend, // BTC —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                orderBook: signal.confirmation.overall, // Order Book –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (true/false)
                open: signal.entryPrice,
                side: signal.direction.toLowerCase() as 'long' | 'short',
                tp: signal.takeProfitPrice,
                sl: signal.stopLossPrice,
            };

            await this.signalService.createTradingSignal(googleSheetsSignal, 'page');

            const confirmStatus = signal.confirmation.overall ? 'üü¢ –ü–û–õ–ù–û–ï' : 'üü° –ß–ê–°–¢–ò–ß–ù–û–ï';
            this.logger.log(`üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets (page): ${signal.symbol} ${signal.direction} | ${confirmStatus} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ`);
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ Google Sheets: ${error.message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Google Sheets –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "page" –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –Ω–∞ "closed-trades" –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–µ
     */
    private async updateSignalResultInGoogleSheets(position: TradingPosition): Promise<void> {
        try {
            // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "page"
            const googleSheetsSignal: GoogleSheetsSignal = {
                date: new Date(position.entryTime).toISOString().split('T')[0], // –î–∞—Ç–∞ –≤—Ö–æ–¥–∞
                symbol: position.symbol,
                VP: position.confirmation.volumeProfile,
                BTC: position.confirmation.btcTrend,
                orderBook: position.confirmation.overall,
                open: position.entryPrice,
                side: position.direction.toLowerCase() as 'long' | 'short',
                tp: position.takeProfitPrice,
                sl: position.stopLossPrice,
                result: position.realizedPnl, // –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            };

            await this.signalService.updateTradingSignalResult(googleSheetsSignal, 'page');

            // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "closed-trades" —Å –ø–æ–ª–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            const closedTradeSignal: GoogleSheetsSignal = {
                date: this.formatFullDateTime(position.closedTime || Date.now()), // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
                symbol: position.symbol,
                VP: position.confirmation.volumeProfile,
                BTC: position.confirmation.btcTrend,
                orderBook: position.confirmation.overall,
                open: position.entryPrice,
                side: position.direction.toLowerCase() as 'long' | 'short',
                tp: position.takeProfitPrice,
                sl: position.stopLossPrice,
                result: position.realizedPnl,
            };

            await this.signalService.createTradingSignal(closedTradeSignal, 'closed-trades');

            const pnlIcon = (position.realizedPnl ?? 0) > 0 ? '‚úÖ' : '‚ùå';
            const confirmStatus = position.confirmation.overall ? 'üü¢' : 'üü°';
            this.logger.log(`üìä ${pnlIcon} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets (page): ${position.symbol} ${position.realizedPnl?.toFixed(2)}% | ${confirmStatus}`);
            this.logger.log(`üìä ${pnlIcon} –ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets (closed-trades): ${position.symbol} ${position.realizedPnl?.toFixed(2)}%`);
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Google Sheets: ${error.message}`);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private formatPrice(price: number): string {
        if (price >= 1000) {
            return price.toFixed(2);
        } else if (price >= 1) {
            return price.toFixed(4);
        } else if (price >= 0.01) {
            return price.toFixed(6);
        } else {
            return price.toFixed(8);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
     */
    private formatFullDateTime(timestamp: number): string {
        const date = new Date(timestamp);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    /**
     * üî• –í–ê–õ–ò–î–ê–¶–ò–Ø –° VOLUME PROFILE: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–æ–∫–æ–≤–∏–∫ —Å –ø–æ–º–æ—â—å—é Volume Profile
     */
    private async validateWithVolumeProfile(pattern: SidewaysPattern): Promise<boolean> {
        try {
            // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
            // –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VolumeProfileService
            this.logger.debug(`${pattern.symbol}: VP –≤–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
            return true;

        } catch (error) {
            this.logger.error(`${pattern.symbol}: –û—à–∏–±–∫–∞ Volume Profile –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, (error as Error).message);
            return false;
        }
    }
}
