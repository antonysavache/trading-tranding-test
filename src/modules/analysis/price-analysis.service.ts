import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { KlineData } from '../../interfaces/kline.interface';
import { PricePoint, PriceMovement, SidewaysPattern } from '../../interfaces/analysis.interface';
import { VirtualTradingService } from '../trading/virtual-trading.service';
import { TrendAnalysisService } from './trend-analysis.service';
import { FilterStatisticsService } from './filter-statistics.service';

@Injectable()
export class PriceAnalysisService {
  private readonly logger = new Logger(PriceAnalysisService.name);
  private readonly lookbackPeriod: number;
  private readonly minPriceMovement: number;
  private readonly returnThreshold: number;
  private readonly minChannelWidthPercent: number;
  
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
  private readonly activeMovements: Map<string, PriceMovement> = new Map();

  constructor(
    private configService: ConfigService,
    private virtualTradingService: VirtualTradingService,
    private trendAnalysisService: TrendAnalysisService,
    private filterStatisticsService: FilterStatisticsService, // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  ) {
    this.lookbackPeriod = this.configService.get<number>('analysis.lookbackPeriod', 3);
    this.minPriceMovement = this.configService.get<number>('analysis.minPriceMovement', 0.0005);
    this.returnThreshold = this.configService.get<number>('analysis.returnThreshold', 0.001);
    this.minChannelWidthPercent = this.configService.get<number>('analysis.minChannelWidthPercent', 2.0);
  }

  async analyzeKlines(klines: KlineData[]): Promise<SidewaysPattern[]> {
    if (klines.length < this.lookbackPeriod * 2 + 1) {
      return [];
    }

    const symbol = klines[0]?.symbol;
    if (!symbol) return [];

    const patterns: SidewaysPattern[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–∫–æ–≤–∏–∫–æ–≤
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (–¥–æ bufferSize = 60 —Å–≤–µ—á–µ–π = 5 —á–∞—Å–æ–≤)
    const recentKlines = klines; // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ slice(-12)
    
    // –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
    const pricePoints = this.findLocalExtremes(recentKlines);
    
    if (pricePoints.length === 0) {
      return patterns;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    this.updateMovement(symbol, pricePoints, recentKlines);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –±–æ–∫–æ–≤–∏–∫ 
    const completedPattern = await this.checkForSidewaysCompletion(symbol, recentKlines);
    if (completedPattern) {
      patterns.push(completedPattern);
      
      // –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ë–ï–ó –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
      const currentPrice = parseFloat(recentKlines[recentKlines.length - 1].close);
      try {
        const trendAnalysis = this.trendAnalysisService.analyzeTrend(recentKlines);
        const marketFilter = this.trendAnalysisService.checkMarketFilters(symbol, trendAnalysis, recentKlines[recentKlines.length - 1]);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å
        const direction = this.getTradeDirection(completedPattern, currentPrice);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.filterStatisticsService.recordFilterDecision(
          symbol,
          trendAnalysis.direction,
          trendAnalysis.strength,
          marketFilter.allowLong,
          marketFilter.allowShort,
          marketFilter.reason,
          direction
        );
        
        // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ –±—ã —Ñ–∏–ª—å—Ç—Ä—ã (–Ω–æ –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö)
        this.logger.log(
          `${symbol}: üìä –§–ò–õ–¨–¢–†–´ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) | ` +
          `–¢—Ä–µ–Ω–¥: ${trendAnalysis.direction} (${trendAnalysis.strength.toFixed(1)}%) | ` +
          `–ü–ª–∞–Ω–∏—Ä—É–µ–º: ${direction} | ` +
          `–§–∏–ª—å—Ç—Ä —Ä–∞–∑—Ä–µ—à–∏–ª –±—ã: LONG=${marketFilter.allowLong ? '‚úÖ' : '‚ùå'} SHORT=${marketFilter.allowShort ? '‚úÖ' : '‚ùå'} | ` +
          `${marketFilter.reason}`
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–æ –° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö
        await this.virtualTradingService.processPattern(completedPattern, currentPrice, {
          trendDirection: trendAnalysis.direction,
          trendStrength: trendAnalysis.strength,
          allowLong: marketFilter.allowLong,
          allowShort: marketFilter.allowShort,
          reason: marketFilter.reason,
          details: marketFilter.filters,
        });
      } catch (error) {
        this.logger.warn(`${symbol}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${error.message}`);
        // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        await this.virtualTradingService.processPattern(completedPattern, currentPrice);
      }
    }

    return patterns;
  }

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  async processKlineForTrading(kline: KlineData): Promise<void> {
    await this.virtualTradingService.checkPositionsOnCandle(kline);
  }

  private findLocalExtremes(klines: KlineData[]): PricePoint[] {
    const points: PricePoint[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–µ—á–∏, –∏—Å–∫–ª—é—á–∞—è –∫—Ä–∞—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    for (let i = this.lookbackPeriod; i < klines.length - this.lookbackPeriod; i++) {
      const current = klines[i];
      const currentHigh = parseFloat(current.high);
      const currentLow = parseFloat(current.low);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
      if (this.isLocalHigh(klines, i)) {
        points.push({
          price: currentHigh,
          timestamp: current.closeTime,
          type: 'high',
          index: i,
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
      if (this.isLocalLow(klines, i)) {
        points.push({
          price: currentLow,
          timestamp: current.closeTime,
          type: 'low',
          index: i,
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
    const sortedPoints = points.sort((a, b) => a.timestamp - b.timestamp);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (sortedPoints.length > 0) {
      const symbol = klines[0]?.symbol;
      this.logger.debug(`${symbol}: –ù–∞–π–¥–µ–Ω–æ ${sortedPoints.length} —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ –∑–∞ ${klines.length} —Å–≤–µ—á–µ–π (${(klines.length * 5)} –º–∏–Ω—É—Ç)`);
    }
    
    return sortedPoints;
  }

  private isLocalHigh(klines: KlineData[], index: number): boolean {
    const currentHigh = parseFloat(klines[index].high);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º –≤—ã—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
      if (i !== index && i >= 0 && i < klines.length) {
        if (parseFloat(klines[i].high) >= currentHigh) {
          return false;
        }
      }
    }
    
    return true;
  }

  private isLocalLow(klines: KlineData[], index: number): boolean {
    const currentLow = parseFloat(klines[index].low);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º—É–º –Ω–∏–∂–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
      if (i !== index && i >= 0 && i < klines.length) {
        if (parseFloat(klines[i].low) <= currentLow) {
          return false;
        }
      }
    }
    
    return true;
  }

  private updateMovement(symbol: string, pricePoints: PricePoint[], klines: KlineData[]): void {
    if (pricePoints.length === 0) return;

    let movement = this.activeMovements.get(symbol);
    const latestPoint = pricePoints[pricePoints.length - 1];
    const currentPrice = parseFloat(klines[klines.length - 1].close);

    if (!movement) {
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
      movement = {
        symbol,
        points: [latestPoint],
        status: latestPoint.type === 'high' ? 'waiting_for_low' : 'waiting_for_high',
        startTime: latestPoint.timestamp,
        direction: latestPoint.type === 'high' ? 'high_to_low_to_high' : 'low_to_high_to_low',
      };
      
      this.activeMovements.set(symbol, movement);
      this.logger.log(`${symbol}: üü° –ù–∞—á–∞—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç ${latestPoint.type} ${latestPoint.price.toFixed(4)}`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    const lastPoint = movement.points[movement.points.length - 1];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    if (this.shouldAddPoint(movement, latestPoint)) {
      movement.points.push(latestPoint);
      this.updateMovementStatus(movement, currentPrice);
      
      this.logger.log(`${symbol}: ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ ${latestPoint.type} ${latestPoint.price.toFixed(4)}, —Å—Ç–∞—Ç—É—Å: ${movement.status}`);
    }
  }

  private shouldAddPoint(movement: PriceMovement, newPoint: PricePoint): boolean {
    const lastPoint = movement.points[movement.points.length - 1];
    
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –ø–æ–¥—Ä—è–¥
    if (lastPoint.type === newPoint.type) {
      return false;
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    if (movement.points.length === 1) {
      const priceRange = Math.abs(newPoint.price - lastPoint.price);
      const rangePercentage = (priceRange / Math.min(newPoint.price, lastPoint.price)) * 100;
      
      // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
      if (rangePercentage < this.minChannelWidthPercent) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    switch (movement.status) {
      case 'waiting_for_low':
        return newPoint.type === 'low';
      case 'waiting_for_high':
        return newPoint.type === 'high';
      default:
        return false;
    }
  }

  private updateMovementStatus(movement: PriceMovement, currentPrice: number): void {
    switch (movement.status) {
      case 'waiting_for_low':
        if (movement.points.length >= 2) {
          movement.status = 'waiting_for_return';
        }
        break;
      case 'waiting_for_high':
        if (movement.points.length >= 2) {
          movement.status = 'waiting_for_return';
        }
        break;
    }
  }

  private async checkForSidewaysCompletion(symbol: string, klines: KlineData[]): Promise<SidewaysPattern | null> {
    const movement = this.activeMovements.get(symbol);
    
    if (!movement || movement.status !== 'waiting_for_return' || movement.points.length < 2) {
      return null;
    }

    const currentPrice = parseFloat(klines[klines.length - 1].close);
    const firstPoint = movement.points[0];
    const secondPoint = movement.points[1];

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Ö–æ–º –∏ –Ω–∏–∑–æ–º –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
    const highPrice = Math.max(firstPoint.price, secondPoint.price);
    const lowPrice = Math.min(firstPoint.price, secondPoint.price);
    const priceRange = Math.abs(highPrice - lowPrice);
    const rangePercentage = (priceRange / lowPrice) * 100;

    // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∫–∞–Ω–∞–ª–∞ - –Ω–µ —Å—á–∏—Ç–∞–µ–º –±–æ–∫–æ–≤–∏–∫–æ–º
    if (rangePercentage < this.minChannelWidthPercent) {
      this.logger.debug(`${symbol}: –¥–≤–∏–∂–µ–Ω–∏–µ ${rangePercentage.toFixed(2)}% –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ ${this.minChannelWidthPercent}%`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
    const returnThreshold = firstPoint.price * this.returnThreshold;
    const priceDistance = Math.abs(currentPrice - firstPoint.price);

    if (priceDistance <= returnThreshold) {
      this.logger.log(`${symbol}: üéØ –ë–û–ö–û–í–ò–ö –Ω–∞–π–¥–µ–Ω! –î–∏–∞–ø–∞–∑–æ–Ω: ${rangePercentage.toFixed(2)}% | LOW: ${lowPrice.toFixed(6)} | HIGH: ${highPrice.toFixed(6)} | CURRENT: ${currentPrice.toFixed(6)}`);
      
      // –°–æ–∑–¥–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
      const finalPattern: SidewaysPattern = {
        symbol,
        startPrice: firstPoint.price,
        middlePrice: secondPoint.price,
        endPrice: currentPrice,
        startTime: firstPoint.timestamp,
        endTime: Date.now(),
        direction: movement.direction,
        pricePoints: [...movement.points],
        channelWidthPercent: rangePercentage,
        highLevel: highPrice,
        lowLevel: lowPrice,
      };

      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
      this.activeMovements.delete(symbol);
      
      this.logger.log(`${symbol}: üéØ –ë–û–ö–û–í–ò–ö –ù–ê–ô–î–ï–ù | –®–∏—Ä–∏–Ω–∞: ${rangePercentage.toFixed(2)}%`);
      
      return finalPattern;
    }

    return null;
  }

  getActiveMovements(): Map<string, PriceMovement> {
    return new Map(this.activeMovements);
  }

  clearMovement(symbol: string): void {
    this.activeMovements.delete(symbol);
  }

  clearAllMovements(): void {
    this.activeMovements.clear();
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
  private getTradeDirection(pattern: SidewaysPattern, currentPrice: number): 'LONG' | 'SHORT' {
    const distanceToHigh = Math.abs(currentPrice - pattern.highLevel);
    const distanceToLow = Math.abs(currentPrice - pattern.lowLevel);
    
    if (distanceToHigh < distanceToLow) {
      return 'SHORT'; // –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑
    } else {
      return 'LONG'; // –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã, –æ–∂–∏–¥–∞–µ–º –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö
    }
  }
}
