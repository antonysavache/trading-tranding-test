import {Injectable, Logger} from '@nestjs/common';
import {ConfigService} from '@nestjs/config';
import {KlineData} from '../../interfaces/kline.interface';
import {PricePoint, PriceMovement, SidewaysPattern} from '../../interfaces/analysis.interface';
import {VolumeProfileService, VolumeAnalysis} from './volume-profile.service';

@Injectable()
export class PriceAnalysisService {
    private readonly logger = new Logger(PriceAnalysisService.name);
    private readonly lookbackPeriod: number;
    private readonly minPriceMovement: number;
    private readonly returnThreshold: number;

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    private readonly activeMovements: Map<string, PriceMovement> = new Map();

    constructor(
        private configService: ConfigService,
        private volumeProfileService: VolumeProfileService,
    ) {
        this.lookbackPeriod = this.configService.get<number>('analysis.lookbackPeriod', 3);
        this.minPriceMovement = this.configService.get<number>('analysis.minPriceMovement', 0.0005);
        this.returnThreshold = this.configService.get<number>('analysis.returnThreshold', 0.001);
    }

    async analyzeKlines(klines: KlineData[]): Promise<SidewaysPattern[]> {
        if (klines.length < this.lookbackPeriod * 2 + 1) {
            return [];
        }

        const symbol = klines[0]?.symbol;
        if (!symbol) return [];

        const patterns: SidewaysPattern[] = [];

        // –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π
        const recentKlines = klines.slice(-20); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç

        // –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
        const pricePoints = this.findLocalExtremes(recentKlines);

        if (pricePoints.length === 0) {
            return patterns;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        this.updateMovement(symbol, pricePoints, recentKlines);

        // üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –±–æ–∫–æ–≤–∏–∫ –° Volume Profile
        const completedPattern = await this.checkForSidewaysCompletion(symbol, recentKlines);
        if (completedPattern) {
            patterns.push(completedPattern);
        }

        return patterns;
    }

    private findLocalExtremes(klines: KlineData[]): PricePoint[] {
        const points: PricePoint[] = [];

        for (let i = this.lookbackPeriod; i < klines.length - this.lookbackPeriod; i++) {
            const current = klines[i];
            const currentHigh = parseFloat(current.high);
            const currentLow = parseFloat(current.low);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            if (this.isLocalHigh(klines, i)) {
                points.push({
                    price: currentHigh,
                    timestamp: current.closeTime,
                    type: 'high',
                    index: i,
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            if (this.isLocalLow(klines, i)) {
                points.push({
                    price: currentLow,
                    timestamp: current.closeTime,
                    type: 'low',
                    index: i,
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return points.sort((a, b) => a.timestamp - b.timestamp);
    }

    private isLocalHigh(klines: KlineData[], index: number): boolean {
        const currentHigh = parseFloat(klines[index].high);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º –≤—ã—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
            if (i !== index && i >= 0 && i < klines.length) {
                if (parseFloat(klines[i].high) >= currentHigh) {
                    return false;
                }
            }
        }

        return true;
    }

    private isLocalLow(klines: KlineData[], index: number): boolean {
        const currentLow = parseFloat(klines[index].low);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º—É–º –Ω–∏–∂–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
            if (i !== index && i >= 0 && i < klines.length) {
                if (parseFloat(klines[i].low) <= currentLow) {
                    return false;
                }
            }
        }

        return true;
    }

    private updateMovement(symbol: string, pricePoints: PricePoint[], klines: KlineData[]): void {
        if (pricePoints.length === 0) return;

        let movement = this.activeMovements.get(symbol);
        const latestPoint = pricePoints[pricePoints.length - 1];
        const currentPrice = parseFloat(klines[klines.length - 1].close);

        if (!movement) {
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
            movement = {
                symbol,
                points: [latestPoint],
                status: latestPoint.type === 'high' ? 'waiting_for_low' : 'waiting_for_high',
                startTime: latestPoint.timestamp,
                direction: latestPoint.type === 'high' ? 'high_to_low_to_high' : 'low_to_high_to_low',
            };

            this.activeMovements.set(symbol, movement);
            this.logger.debug(`${symbol}: –ù–∞—á–∞—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç ${latestPoint.type} ${latestPoint.price}`);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        const lastPoint = movement.points[movement.points.length - 1];

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if (this.shouldAddPoint(movement, latestPoint)) {
            movement.points.push(latestPoint);
            this.updateMovementStatus(movement, currentPrice);

            this.logger.debug(`${symbol}: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ ${latestPoint.type} ${latestPoint.price}, —Å—Ç–∞—Ç—É—Å: ${movement.status}`);
        }
    }

    private shouldAddPoint(movement: PriceMovement, newPoint: PricePoint): boolean {
        const lastPoint = movement.points[movement.points.length - 1];

        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –ø–æ–¥—Ä—è–¥
        if (lastPoint.type === newPoint.type) {
            return false;
        }

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ 2%
        if (movement.points.length === 1) {
            const priceRange = Math.abs(newPoint.price - lastPoint.price);
            const rangePercentage = (priceRange / Math.min(newPoint.price, lastPoint.price)) * 100;

            // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 2%, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
            if (rangePercentage < 2.0) {
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        switch (movement.status) {
            case 'waiting_for_low':
                return newPoint.type === 'low';
            case 'waiting_for_high':
                return newPoint.type === 'high';
            default:
                return false;
        }
    }

    private updateMovementStatus(movement: PriceMovement, currentPrice: number): void {
        switch (movement.status) {
            case 'waiting_for_low':
                if (movement.points.length >= 2) {
                    movement.status = 'waiting_for_return';
                }
                break;
            case 'waiting_for_high':
                if (movement.points.length >= 2) {
                    movement.status = 'waiting_for_return';
                }
                break;
        }
    }

    private async checkForSidewaysCompletion(symbol: string, klines: KlineData[]): Promise<SidewaysPattern | null> {
        const movement = this.activeMovements.get(symbol);

        if (!movement || movement.status !== 'waiting_for_return' || movement.points.length < 2) {
            return null;
        }

        const currentPrice = parseFloat(klines[klines.length - 1].close);
        const firstPoint = movement.points[0];
        const secondPoint = movement.points[1];

        // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–µ—Ä—Ö–æ–º –∏ –Ω–∏–∑–æ–º –º–∏–Ω–∏–º—É–º 2%
        const highPrice = Math.max(firstPoint.price, secondPoint.price);
        const lowPrice = Math.min(firstPoint.price, secondPoint.price);
        const priceRange = Math.abs(highPrice - lowPrice);
        const rangePercentage = (priceRange / lowPrice) * 100;

        // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ 2% - –Ω–µ —Å—á–∏—Ç–∞–µ–º –±–æ–∫–æ–≤–∏–∫–æ–º
        if (rangePercentage < 2.0) {
            this.logger.debug(`${symbol}: –¥–≤–∏–∂–µ–Ω–∏–µ ${rangePercentage.toFixed(2)}% –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 2%`);
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
        const returnThreshold = firstPoint.price * this.returnThreshold;
        const priceDistance = Math.abs(currentPrice - firstPoint.price);

        if (priceDistance <= returnThreshold) {
            this.logger.log(`${symbol}: üéØ –ë–û–ö–û–í–ò–ö –ù–ê–ô–î–ï–ù! –î–∏–∞–ø–∞–∑–æ–Ω: ${rangePercentage.toFixed(2)}% | LOW: ${lowPrice.toFixed(6)} | HIGH: ${highPrice.toFixed(6)} | CURRENT: ${currentPrice.toFixed(6)}`);

            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –±–æ–∫–æ–≤–∏–∫–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ)
            const pattern: SidewaysPattern = {
                symbol,
                startPrice: firstPoint.price,
                middlePrice: secondPoint.price,
                endPrice: currentPrice,
                startTime: firstPoint.timestamp,
                endTime: Date.now(),
                direction: movement.direction,
                pricePoints: [...movement.points],
            };

            // –£–¥–∞–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            this.activeMovements.delete(symbol);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–æ–∫–æ–≤–∏–∫ –ë–ï–ó –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
            return pattern;
        }

        return null;
    }

    getActiveMovements(): Map<string, PriceMovement> {
        return new Map(this.activeMovements);
    }

    clearMovement(symbol: string): void {
        this.activeMovements.delete(symbol);
    }

    clearAllMovements(): void {
        this.activeMovements.clear();
    }

}
