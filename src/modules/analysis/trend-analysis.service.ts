import {Injectable, Logger} from '@nestjs/common';
import {ConfigService} from '@nestjs/config';
import {KlineData} from '../../interfaces/kline.interface';
import {PricePoint, TrendPattern, TrendMovement} from '../../interfaces/analysis.interface';

@Injectable()
export class TrendAnalysisService {
    private readonly logger = new Logger(TrendAnalysisService.name);
    private readonly lookbackPeriod: number;
    private readonly minTrendStepPercent: number;
    private readonly maxTrendStepPercent: number;

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    private readonly activeTrendMovements: Map<string, TrendMovement> = new Map();

    constructor(private configService: ConfigService) {
        this.lookbackPeriod = this.configService.get<number>('analysis.lookbackPeriod', 3);
        this.minTrendStepPercent = this.configService.get<number>('analysis.minTrendStepPercent', 1.0); // 1%
        this.maxTrendStepPercent = this.configService.get<number>('analysis.maxTrendStepPercent', 10.0); // 10%

        this.logger.log(`Trend Analysis Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω | –ú–∏–Ω. —Å—Ç—É–ø–µ–Ω—å: ${this.minTrendStepPercent}% | –ú–∞–∫—Å. —Å—Ç—É–ø–µ–Ω—å: ${this.maxTrendStepPercent}%`);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç klines –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    analyzeKlines(klines: KlineData[]): TrendPattern[] {
        if (klines.length < this.lookbackPeriod * 2 + 1) {
            return [];
        }

        const symbol = klines[0]?.symbol;
        if (!symbol) return [];

        const patterns: TrendPattern[] = [];

        // –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∏–Ω—É—Ç
        const recentKlines = klines.slice(-20);

        // –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
        const pricePoints = this.findLocalExtremes(recentKlines);

        if (pricePoints.length === 0) {
            return patterns;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        this.updateTrendMovement(symbol, pricePoints, recentKlines);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
        const completedPattern = this.checkForTrendCompletion(symbol, recentKlines);
        if (completedPattern) {
            patterns.push(completedPattern);
        }

        return patterns;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
     */
    private findLocalExtremes(klines: KlineData[]): PricePoint[] {
        const points: PricePoint[] = [];

        for (let i = this.lookbackPeriod; i < klines.length - this.lookbackPeriod; i++) {
            const current = klines[i];
            const currentHigh = parseFloat(current.high);
            const currentLow = parseFloat(current.low);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            if (this.isLocalHigh(klines, i)) {
                points.push({
                    price: currentHigh,
                    timestamp: current.closeTime,
                    type: 'high',
                    index: i,
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            if (this.isLocalLow(klines, i)) {
                points.push({
                    price: currentLow,
                    timestamp: current.closeTime,
                    type: 'low',
                    index: i,
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return points.sort((a, b) => a.timestamp - b.timestamp);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º –º–∞–∫—Å–∏–º—É–º–æ–º
     */
    private isLocalHigh(klines: KlineData[], index: number): boolean {
        const currentHigh = parseFloat(klines[index].high);

        for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
            if (i !== index && i >= 0 && i < klines.length) {
                if (parseFloat(klines[i].high) >= currentHigh) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º
     */
    private isLocalLow(klines: KlineData[], index: number): boolean {
        const currentLow = parseFloat(klines[index].low);

        for (let i = index - this.lookbackPeriod; i <= index + this.lookbackPeriod; i++) {
            if (i !== index && i >= 0 && i < klines.length) {
                if (parseFloat(klines[i].low) <= currentLow) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    private updateTrendMovement(symbol: string, pricePoints: PricePoint[], klines: KlineData[]): void {
        if (pricePoints.length === 0) return;

        let movement = this.activeTrendMovements.get(symbol);
        const latestPoint = pricePoints[pricePoints.length - 1];

        if (!movement) {
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            movement = {
                symbol,
                points: [latestPoint],
                status: 'collecting_points',
                startTime: latestPoint.timestamp,
            };

            this.activeTrendMovements.set(symbol, movement);
            this.logger.debug(`${symbol}: –ù–∞—á–∞—Ç —Å–±–æ—Ä —Ç–æ—á–µ–∫ —Ç—Ä–µ–Ω–¥–∞ –æ—Ç ${latestPoint.type} ${latestPoint.price.toFixed(6)}`);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏
        const lastPoint = movement.points[movement.points.length - 1];

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ —Ç–∏–ø—É
        if (lastPoint.type !== latestPoint.type) {
            movement.points.push(latestPoint);
            this.logger.debug(`${symbol}: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ ${latestPoint.type} ${latestPoint.price.toFixed(6)}, –≤—Å–µ–≥–æ —Ç–æ—á–µ–∫: ${movement.points.length}`);

            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å 3 —Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥
            if (movement.points.length >= 3) {
                movement.status = 'trend_detected';
            }
        }
    }

    /**
     * üéØ –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ 3 —Ç–æ—á–∫–∞–º
     */
    private checkForTrendCompletion(symbol: string, klines: KlineData[]): TrendPattern | null {
        const movement = this.activeTrendMovements.get(symbol);

        if (!movement || movement.status !== 'trend_detected' || movement.points.length < 3) {
            return null;
        }

        const currentPrice = parseFloat(klines[klines.length - 1].close);
        const [point1, point2, point3] = movement.points.slice(0, 3);

        // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ï–ù–î–ê
        let trendDirection: 'UPTREND' | 'DOWNTREND';

        if (point3.price > point1.price) {
            trendDirection = 'UPTREND';
        } else if (point3.price < point1.price) {
            trendDirection = 'DOWNTREND';
        } else {
            // –ï—Å–ª–∏ —Ç–æ—á–∫–∞3 —Ä–∞–≤–Ω–∞ —Ç–æ—á–∫–µ1 - —ç—Ç–æ –Ω–µ —Ç—Ä–µ–Ω–¥
            return null;
        }

        // üéØ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –†–ê–ó–ú–ï–† –°–¢–£–ü–ï–ù–ò
        const stepSize = Math.abs(point3.price - point1.price);
        const stepPercentage = (stepSize / Math.min(point1.price, point3.price)) * 100;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—É–ø–µ–Ω—å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if (stepPercentage < this.minTrendStepPercent || stepPercentage > this.maxTrendStepPercent) {
            this.logger.debug(`${symbol}: –°—Ç—É–ø–µ–Ω—å ${stepPercentage.toFixed(2)}% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${this.minTrendStepPercent}%-${this.maxTrendStepPercent}%`);
            return null;
        }

        // üéØ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –°–õ–ï–î–£–Æ–©–ò–ï –£–†–û–í–ù–ò –í–•–û–î–ê
        const nextLevels = this.calculateNextLevels(currentPrice, stepSize, trendDirection);

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
        this.logger.log(
            `üéØ –¢–†–ï–ù–î –ù–ê–ô–î–ï–ù: ${symbol} | ${trendDirection} | ` +
            `–¢–æ—á–∫–∏: ${point1.price.toFixed(6)} ‚Üí ${point2.price.toFixed(6)} ‚Üí ${point3.price.toFixed(6)} | ` +
            `–°—Ç—É–ø–µ–Ω—å: ${stepPercentage.toFixed(2)}% (${stepSize.toFixed(6)}) | ` +
            `–£—Ä–æ–≤–Ω–∏: LONG=${nextLevels.long.toFixed(6)} SHORT=${nextLevels.short.toFixed(6)}`
        );

        const pattern: TrendPattern = {
            symbol,
            point1,
            point2,
            point3,
            currentPrice,
            trendDirection,
            stepSize,
            stepPercentage,
            nextLevels,
            startTime: point1.timestamp,
            endTime: Date.now(),
        };

        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        this.activeTrendMovements.delete(symbol);

        return pattern;
    }

    /**
     * üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
     */
    private calculateNextLevels(currentPrice: number, stepSize: number, trendDirection: 'UPTREND' | 'DOWNTREND'): {
        long: number;
        short: number
    } {
        if (trendDirection === 'UPTREND') {
            // –í –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ:
            // LONG - –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ –æ—Ç–∫–∞—Ç–µ –≤–Ω–∏–∑ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - —Å—Ç—É–ø–µ–Ω—å)
            // SHORT - –ø—Ä–æ–¥–∞–µ–º –Ω–∞ –ø—Ä–æ–±–æ–µ –≤–≤–µ—Ä—Ö (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + —Å—Ç—É–ø–µ–Ω—å)
            return {
                long: currentPrice - stepSize,
                short: currentPrice + stepSize,
            };
        } else {
            // –í –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ:
            // LONG - –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ –ø—Ä–æ–±–æ–µ –≤–≤–µ—Ä—Ö (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + —Å—Ç—É–ø–µ–Ω—å)
            // SHORT - –ø—Ä–æ–¥–∞–µ–º –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –≤–Ω–∏–∑ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - —Å—Ç—É–ø–µ–Ω—å)
            return {
                long: currentPrice + stepSize,
                short: currentPrice - stepSize,
            };
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    getActiveTrendMovements(): Map<string, TrendMovement> {
        return new Map(this.activeTrendMovements);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
     */
    clearTrendMovement(symbol: string): void {
        this.activeTrendMovements.delete(symbol);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è
     */
    clearAllTrendMovements(): void {
        this.activeTrendMovements.clear();
    }
}
